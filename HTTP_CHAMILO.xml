<ConnectionProxies>
  <Items>
    <ConnectionProxy>
      <Items>
        <ConnectionProxyRuleSet>
          <Items>
            <ConnectionProxySyntaxItem>
              <Items>
                <Rule>
                  <Items />
                  <RegExp>
                  </RegExp>
                  <IgnoreCase>False</IgnoreCase>
                  <ValueType>stringType</ValueType>
                  <UsePasswordChar>False</UsePasswordChar>
                  <Description>
                  </Description>
                  <Label>
                  </Label>
                  <ShowInGui>True</ShowInGui>
                  <IsDefaultItem>False</IsDefaultItem>
                  <IsEmpty>False</IsEmpty>
                </Rule>
              </Items>
              <Description>Must start with 'http://' and may not end with /.</Description>
              <Label>URL</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
          </Items>
          <Connected>False</Connected>
          <TracertField>1</TracertField>
          <ChildDelimiter>
          </ChildDelimiter>
          <Description>
          </Description>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyRuleSet>
        <ConnectionProxyCode>
          <Items />
          <Code>/*
    ConnectionProxy generated by vApus
    vApus is Copyrighted by Sizing Servers Lab
    University College of West-Flanders, Department GKG
    
    Note: If you want to edit this connection proxy code you need to know what you are doing. You might break your stresstest.
    
    VERSION @BRANCH@-@TM@
*/

// The following line is used to add references when compiling, you can edit this here or in the references tab page. Please use the 'Browse...' button for dlls that are not in the GAC.
// dllreferences:System.dll;System.Data.dll;vApus.Util.dll;vApus.Stresstest.dll;System.Web.dll;System.Windows.Forms.dll;

#region Preprocessors
    //
    // e.g. #define NOTMUCHUSEDFEATURE
    //
    // Further in code:
    // #if NOTMUCHUSEDFEATURE
    // do stuff...
    // #endif
    
    // When used, the Connection set in vApus will be ignored for the stresstest. The logged "Destination Host" is used instead.
    // This is sometimes necessary if for example authentication is redirected to a secondary server or if cookie-free
    // subdomains (or CDNs) are used to serve static content.
    // For this setting to work, the "Destination Host" value must be available in the Log.
    // This setting is not used while testing the Connection, so be sure to always setup a valid Connection in vApus.
    //#define USEMULTICONNECTION
#endregion // Preprocessors

#region Usings
    using System;
    using System.Data;
    using System.Diagnostics;
    // Contains the StringTree class.
    using vApus.Util;
    
    //
    // Here you can put your own usings under the default ones.
    //
    using System.IO;
    using System.Net;
    using System.IO.Compression;
    using System.Web;
    using System.Windows.Forms;
#endregion // Usings

namespace vApus.Stresstest {
    public class ConnectionProxy : IConnectionProxy {
        
        #region Fields
            Stopwatch _stopwatch = new Stopwatch();
            bool _isDisposed;
            // Please do not edit the following lines (RuleSetFields).
            // -- RuleSetFields --
            System.String _connectionProxySyntaxItem0 = string.Empty; // URL
            // -- RuleSetFields --
            
            //
            // Here you can put labels, for instance, for the index values of the String Tree nodes (eg. int ip = 0).
            //
            StringTree _parameterizedLogEntry;
            HttpWebRequest _httpWebRequest;
            HttpWebResponse _httpWebResponse;
            CookieCollection _cookieCollection;
            StreamReader _streamReader;
            const int _relativeUrl = 0, _requestMethod = 1, _getData = 2, _postData = 3, _cookies = 4, _userAgent = 5, _contentType = 6, _sourceIP = 7, _destinationIP = 8, _destinationHost = 9, _beginTimestamp = 10, _endTimestamp = 11;
            string _repo_object = string.Empty;
            
            //
            // CUSTOMIZATION
            //
            
            // Define the search strings (GETDATA) from the requests where to extract _repo_object in the location header of the response.
            string _calendar_search = "application=personal_calendar&amp;go=publisher&amp;repoviewer_action=creator&amp;content_object_type=calendar_event";
            string _document_search = "renderer=table&amp;tab=category&amp;application=repository&amp;go=creator&amp;content_object_type=document";
        #endregion // Fields
        
        #region Properties
            public bool IsConnectionOpen {
                get {
                    return true;
                }
            }
            public bool IsDisposed {
                get {
                    return _isDisposed;
                }
            }
        #endregion // Properties
        
        public ConnectionProxy() {
            
        }
        
        #region Functions
            public void TestConnection(out string error) {
                error = null;
                
                try {
                    _httpWebRequest= (HttpWebRequest)System.Net.WebRequest.Create(new Uri(_connectionProxySyntaxItem0));
                    _httpWebRequest.UserAgent = "vApus v2 - Test connection function";
                    // 60 seconds seems reasonable.
                    _httpWebRequest.Timeout= 60000;
                    _httpWebRequest.ReadWriteTimeout = _httpWebRequest.Timeout;
                    _httpWebRequest.AllowAutoRedirect = false;
                    _httpWebRequest.ServicePoint.Expect100Continue = false;
                    
                    _httpWebRequest.ServicePoint.ConnectionLimit = 1;
                    
                    _httpWebRequest.Method = "GET";
                    _httpWebRequest.ContentLength = 0;
                    _httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    
                    _cookieCollection= new CookieCollection();
                    
                    HandleCookiesBeforeRequest();
                    _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                    
                    
                    if (_httpWebResponse.StatusCode == HttpStatusCode.NotFound) {
                        throw new Exception("Page not found!");
                    }
                    
                    if (_httpWebResponse.ContentEncoding.ToLower().Contains("gzip")) {
                        _streamReader = new StreamReader(new GZipStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                    }
                    else {
                        _streamReader = new StreamReader(_httpWebResponse.GetResponseStream(), (_httpWebResponse.ContentEncoding.Length != 0) ?
                        System.Text.Encoding.GetEncoding(_httpWebResponse.ContentEncoding) : System.Text.Encoding.GetEncoding(1252));
                    }
                    
                    HandleCookiesAfterRequest();
                }
                catch (Exception ex) {
                    error = ex.ToString();
                }
                finally {
                    _cookieCollection= null;
                    if (_streamReader != null) {
                        try {
                            _streamReader.Close();
                            _streamReader.Dispose();
                            _streamReader = null;
                        }
                        catch {
                        }
                    }
                }
            }
            
            public void OpenConnection() {
                if (!IsConnectionOpen) {
                    //
                    // ...
                    //
                }
            }
            
            public void CloseConnection() {
                if (IsConnectionOpen) {
                    //
                    // ...
                    //
                }
            }
            
            public void SendAndReceive(StringTree parameterizedLogEntry, out DateTime sentAt, out TimeSpan timeToLastByte, out Exception exception) {
                _parameterizedLogEntry = parameterizedLogEntry;
                exception = null;
                
                //
                // parameterizedLogEntry is the log entry parsed to a String Tree using the Log Rule Set.
                // String Tree is a simple class: it can have either a value (property: string Value) or childs who are also String Trees (e.g. StringTree foo = parameterizedLogEntry[n] where n is an integer value).
                // You can get the combined value of the childs using the function CombineValues() (not shallow, returns a string), this uses the child delimiters in the rule set to glue these values together.
                //
                
                //
                // Initiate other stuff here.
                // (eg. Fields or functions from the free coding section.)
                //
                
                if (_isDisposed) {
                    sentAt = DateTime.Now;
                    timeToLastByte = new TimeSpan();
                    return;
                }
                try {
                    sentAt = DateTime.Now;
                    _stopwatch.Start();
                    try {
                        //
                        // Send the request to the server here.
                        //
                        
                        InitHttpWebRequest();
                        InitCookies();
                        HandleCookiesBeforeRequest();
                        ApplyPostData();
                        _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                        
                        if (_httpWebResponse.StatusCode == HttpStatusCode.NotFound) {
                            throw new Exception("Page not found!");
                        }
                        
                        if (_httpWebResponse.ContentEncoding.ToLower().Contains("gzip")) {
                            _streamReader = new StreamReader(new GZipStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                        }
                        else {
                            _streamReader = new StreamReader(_httpWebResponse.GetResponseStream(), (_httpWebResponse.ContentEncoding.Length != 0) ?
                            System.Text.Encoding.GetEncoding(_httpWebResponse.ContentEncoding) : System.Text.Encoding.GetEncoding(1252));
                        }
                        
                        DownloadResponse();
                        
                        // BEGIN CUSTOMIZATION
                        // Here the _calendar_search is used to try and extract the _repo_object from the response's location header.
                        // You can also add extra search strings for more pages (like saving documents in older Chamilo versions).
                        if (_parameterizedLogEntry[_relativeUrl].Value.StartsWith("/chamilo/index.php") &amp;&amp;
                        _parameterizedLogEntry[_getData].CombineValues() == _calendar_search) {
                            if (! string.IsNullOrEmpty(_httpWebResponse.GetResponseHeader("Location"))) {
                                var query = HttpUtility.ParseQueryString(_httpWebResponse.GetResponseHeader("Location"));
                                _repo_object = query["repo_object"];
                                //MessageBox.Show("_repo_object = " + _repo_object);
                            }
                        }
                        // END CUSTOMIZATION
                        
                        HandleCookiesAfterRequest();
                        
                    }
                    catch (Exception ex) {
                        exception = ex;
                    }
                    finally {
                        //
                        // Close stuff if needed.
                        //
                        
                        if (_streamReader != null) {
                            try {
                                _streamReader.Close();
                                _streamReader.Dispose();
                            }
                            finally {
                                _streamReader = null;
                            }
                        }
                    }
                }
                catch {
                    //
                    // Always throw the exception, if any, if 'stuff' cannot be closed.
                    // vApus will handle it as a connection problem.
                    //
                    
                    throw;
                }
                finally {
                    _stopwatch.Stop();
                    timeToLastByte = _stopwatch.Elapsed;
                    _stopwatch.Reset();
                }
            }
            
            public void Dispose() {
                if (!_isDisposed) {
                    _isDisposed = true;
                    try {
                        // timeout immediately.
                        _httpWebRequest.Timeout = 1;
                        _httpWebRequest.ReadWriteTimeout = _httpWebRequest.Timeout;
                        }catch{
                    }
                    _httpWebRequest = null;
                    _httpWebResponse = null;
                    _cookieCollection= null;
                    if (_streamReader != null) {
                        try {
                            _streamReader.Close();
                            _streamReader.Dispose();
                            _streamReader = null;
                        }
                        catch {
                        }
                    }
                }
            }
        #endregion // Functions
        
        #region Free Coding
            private void InitHttpWebRequest() {
                #if USEMULTICONNECTION
                if (_parameterizedLogEntry[_getData].Count != 0) {
                    string getData = ReplaceGetData(_parameterizedLogEntry[_getData].CombineValues());
                    
                    _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("http://{0}{1}?{2}",
                    _parameterizedLogEntry[_destinationHost].Value, _parameterizedLogEntry[_relativeUrl].Value,
                    getData)));
                }
                else {
                    _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("http://{0}{1}",
                    _parameterizedLogEntry[_destinationHost].Value, _parameterizedLogEntry[_relativeUrl].Value)));
                }
                #else
                if (_parameterizedLogEntry[_getData].Count != 0) {
                    string getData = ReplaceGetData(_parameterizedLogEntry[_getData].CombineValues());
                    
                    _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("{0}{1}?{2}",
                    _connectionProxySyntaxItem0, _parameterizedLogEntry[_relativeUrl].Value,
                    getData)));
                }
                else {
                    _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("{0}{1}",
                    _connectionProxySyntaxItem0, _parameterizedLogEntry[_relativeUrl].Value)));
                }
                #endif
                
                _httpWebRequest.UserAgent = _parameterizedLogEntry[_userAgent].Value;
                _httpWebRequest.Timeout= 3600000;
                _httpWebRequest.ReadWriteTimeout = _httpWebRequest.Timeout;
                _httpWebRequest.AllowAutoRedirect = false;
                _httpWebRequest.ServicePoint.Expect100Continue = false;
                
                _httpWebRequest.ServicePoint.ConnectionLimit = (this.GetParent() as ConnectionProxyPool).PoolSize;
                
                _httpWebRequest.Method = _parameterizedLogEntry[_requestMethod].Value;
                _httpWebRequest.ContentLength = 0;
                
                _httpWebRequest.ContentType = String.IsNullOrEmpty(_parameterizedLogEntry[_contentType].Value) ? "application/x-www-form-urlencoded" : _parameterizedLogEntry[_contentType].Value;
            }
            
            private string ReplaceGetData(string getData) {
                // BEGIN CUSTOMIZATION
                if(_repo_object != string.Empty) {
                    getData = getData.Replace("@repo_object", _repo_object);
                }
                // END CUSTOMIZATION
                return getData;
            }
            
            private void InitCookies() {
                if (_cookieCollection == null) {
                    _cookieCollection = new CookieCollection();
                }
            }
            
            private void ApplyPostData() {
                if (_parameterizedLogEntry[_postData].Value.Length != 0) {
                    string postData = _parameterizedLogEntry[_postData].Value;
                    
                    // BEGIN CUSTOMIZATION
                    // Postdata gets replaced.
                    if (_repo_object != string.Empty) {
                        postData = postData.Replace("@repo_object_length", _repo_object.Length.ToString()).Replace("@repo_object", _repo_object);
                    }
                    
                    // Some custom headers are added when _document_search match is found.
                    if(_parameterizedLogEntry[_getData].CombineValues() == _document_search) {
                        _httpWebRequest.Headers.Add("Pragma", "no-cache");
                        _httpWebRequest.Headers.Add("Accept-Encoding", "gzip, deflate");
                    }
                    // END CUSTOMIZATION
                    
                    _httpWebRequest.ContentLength = postData.Length;
                    
                    Stream postStream = _httpWebRequest.GetRequestStream();
                    StreamWriter postStreamWriter = new StreamWriter(postStream);
                    postStreamWriter.Write(postData);
                    postStreamWriter.Flush();
                    
                    postStreamWriter.Close();
                    postStreamWriter.Dispose();
                    postStreamWriter = null;
                    
                    postStream.Close();
                }
            }
            
            private void HandleCookiesBeforeRequest() {
                _httpWebRequest.CookieContainer = new CookieContainer();
                _httpWebRequest.CookieContainer.Add(_cookieCollection);
            }
            
            private void HandleCookiesAfterRequest() {
                if (_httpWebRequest.CookieContainer.Count != 0) {
                    foreach (Cookie cookie in _httpWebRequest.CookieContainer.GetCookies(_httpWebRequest.RequestUri)) {
                        int cookieIndex = GetCookieIndex(cookie.Name);
                        if (cookieIndex == -1) {
                            _cookieCollection.Add(cookie);
                        }
                        else {
                            _cookieCollection[cookieIndex].Value = cookie.Value;
                        }
                    }
                }
                if (_httpWebResponse.Cookies.Count != 0) {
                    foreach (Cookie cookie in _httpWebResponse.Cookies) {
                        int cookieIndex = GetCookieIndex(cookie.Name);
                        if (cookieIndex == -1) {
                            _cookieCollection.Add(cookie);
                        }
                        else {
                            _cookieCollection[cookieIndex].Value = cookie.Value;
                        }
                    }
                }
            }
            
            private int GetCookieIndex(string cookieName) {
                for (int i = 0; i &lt; _cookieCollection.Count; i++) {
                    if (_cookieCollection[i].Name == cookieName) {
                        return i;
                    }
                }
                return -1;
            }
            
            // #373: HTTP Connection proxy does not download responses
            private void DownloadResponse() {
                char[] buffer = new char[1024];
                int count = 0;
                do {
                    count = _streamReader.Read(buffer, 0, 1024);
                } while (count != 0);
            }
        #endregion // Free Coding
    } // ConnectionProxy
} // vApus.Stresstest</Code>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyCode>
      </Items>
      <Label>HTTP CHAMILO @BRANCH@-@TM@</Label>
      <ShowInGui>True</ShowInGui>
      <IsDefaultItem>False</IsDefaultItem>
      <IsEmpty>False</IsEmpty>
    </ConnectionProxy>
  </Items>
</ConnectionProxies>