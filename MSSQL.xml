<ConnectionProxies>
  <Items>
    <ConnectionProxy>
      <Items>
        <ConnectionProxyRuleSet>
          <Items>
            <ConnectionProxySyntaxItem>
              <Items />
              <Description>IP or computername</Description>
              <Label>Server</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
            <ConnectionProxySyntaxItem>
              <Items>
                <Rule>
                  <Items />
                  <RegExp>
                  </RegExp>
                  <IgnoreCase>False</IgnoreCase>
                  <ValueType>intType</ValueType>
                  <UsePasswordChar>False</UsePasswordChar>
                  <Description>
                  </Description>
                  <Label>
                  </Label>
                  <ShowInGui>True</ShowInGui>
                  <IsDefaultItem>False</IsDefaultItem>
                  <IsEmpty>False</IsEmpty>
                </Rule>
              </Items>
              <Description>Default port = 1039</Description>
              <Label>Port</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
            <ConnectionProxySyntaxItem>
              <Items />
              <Description>
              </Description>
              <Label>Database</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
            <ConnectionProxySyntaxItem>
              <Items />
              <Description>
              </Description>
              <Label>User ID</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
            <ConnectionProxySyntaxItem>
              <Items>
                <Rule>
                  <Items />
                  <RegExp>
                  </RegExp>
                  <IgnoreCase>False</IgnoreCase>
                  <ValueType>stringType</ValueType>
                  <UsePasswordChar>True</UsePasswordChar>
                  <Description>
                  </Description>
                  <Label>
                  </Label>
                  <ShowInGui>True</ShowInGui>
                  <IsDefaultItem>False</IsDefaultItem>
                  <IsEmpty>False</IsEmpty>
                </Rule>
              </Items>
              <Description>
              </Description>
              <Label>Password</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
            <ConnectionProxySyntaxItem>
              <Items>
                <Rule>
                  <Items />
                  <RegExp>
                  </RegExp>
                  <IgnoreCase>False</IgnoreCase>
                  <ValueType>boolType</ValueType>
                  <UsePasswordChar>False</UsePasswordChar>
                  <Description>
                  </Description>
                  <Label>
                  </Label>
                  <ShowInGui>True</ShowInGui>
                  <IsDefaultItem>False</IsDefaultItem>
                  <IsEmpty>False</IsEmpty>
                </Rule>
              </Items>
              <Description>False (adviced) or True (starts with a capital letter)</Description>
              <Label>Pooling</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
            <ConnectionProxySyntaxItem>
              <Items />
              <Description>Default = dbmssocn</Description>
              <Label>Network Library</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
          </Items>
          <Connected>True</Connected>
          <TracertField>1</TracertField>
          <ChildDelimiter>;</ChildDelimiter>
          <Description>
          </Description>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyRuleSet>
        <ConnectionProxyCode>
          <Items />
          <Threads>1</Threads>
          <Code>//Connection Proxy Document
/*
    ConnectionProxy generated by vApus
    vApus is Copyrighted by Sizing Servers Lab
    University College of West-Flanders, Department GKG
	
	VERSION @BRANCH@-@TM@
*/

// dllreferences:System.dll;System.Data.dll;vApus.Util.dll;vApus.Stresstest.dll;System.XML.dll;

#region Preprocessors
    //
    // e.g. #define NOTMUCHUSEDFEATURE
    //
    // Further in code:
    // #if NOTMUCHUSEDFEATURE
    // do stuff...
    // #endif
#endregion //Preprocessors
#region Default Usings
    using System;
    using System.Data;
    using System.Diagnostics;
    using vApus.Util;
#endregion //Default Usings
#region Custom Usings
    using System.Data.SqlClient;
#endregion //Custom Usings
namespace vApus.Stresstest {
    public class ConnectionProxy : IConnectionProxy {
        #region Default Fields
            Stopwatch _stopwatch = new Stopwatch();
            bool _isDisposed;
            // -- RuleSetFields --
            System.String _connectionProxySyntaxItem0 = string.Empty; // Server
            System.Int32 _connectionProxySyntaxItem1; // Port
            System.String _connectionProxySyntaxItem2 = string.Empty; // Database
            System.String _connectionProxySyntaxItem3 = string.Empty; // User ID
            System.String _connectionProxySyntaxItem4 = string.Empty; // Password
            System.Boolean _connectionProxySyntaxItem5; // Pooling
            System.String _connectionProxySyntaxItem6 = string.Empty; // Network Library
            // -- RuleSetFields --
            
        #endregion //Default Fields
        #region Custom Fields
            SqlConnection _connection;
            SqlCommand _command;
            IDataReader _reader;
        #endregion //Custom Fields
        #region Properties
            public bool IsConnectionOpen { get {
                return _connection.State == ConnectionState.Open;
            }} //IsConnectionOpen
            public bool IsDisposed { get {
                return _isDisposed;
            }} //IsDisposed
        #endregion //Properties
        public ConnectionProxy() {
            _connection = new SqlConnection("Data Source=" + _connectionProxySyntaxItem0 + "," +
            _connectionProxySyntaxItem1 + ";Initial Catalog=" + _connectionProxySyntaxItem2 + ";User ID=" +
            _connectionProxySyntaxItem3 + ";Password=" + _connectionProxySyntaxItem4 + ";Pooling=" +
            _connectionProxySyntaxItem5 + ";Network Library=" + _connectionProxySyntaxItem6);
            _command = _connection.CreateCommand();
            _command.CommandType = CommandType.Text;
            // Set timeout in seconds equal to timeout server side.
            _command.CommandTimeout = 600;
        } //ConnectionProxy
        #region Functions
            public void TestConnection(out string error) {
                error = null;
                try
                {
                    OpenConnection();
                    if(IsConnectionOpen)
                    {
                        CloseConnection();
                    }
                    else
                    {
                        error = "Could not open the connection.";
                    }
                }
                catch (Exception ex)
                {
                    error = ex.ToString();
                }
            } //TestConnection
            public void OpenConnection() {
                if(!IsConnectionOpen)
                {
                    _connection.Open();
                }
            } //OpenConnection
            public void CloseConnection() {
                if(IsConnectionOpen)
                {
                    _connection.Close();
                }
            } //CloseConnection
            public void SendAndReceive(StringTree parameterizedLogEntry, out DateTime sentAt, out TimeSpan timeToLastByte, out Exception exception) {
                exception = null;
                _command.CommandText = parameterizedLogEntry.Value;
                if (_isDisposed)
                {
                    sentAt = DateTime.Now;
                    timeToLastByte = new TimeSpan();
                    return;
                }
                try
                {
                    sentAt = DateTime.Now;
                    _stopwatch.Start();
                    try
                    {
                        _reader = _command.ExecuteReader();
                    }
                    catch (Exception ex)
                    {
                        exception = ex;
                    }
                    finally
                    {
                        if (_reader != null)
                        {
                            _reader.Close();
                        }
                    }
                }
                catch
                {
                    throw;
                }
                finally
                {
                    _stopwatch.Stop();
                    timeToLastByte = _stopwatch.Elapsed;
                    _stopwatch.Reset();
                }
            } //SendAndReceive
            public void TestSendAndReceive(StringTree parameterizedLogEntry, out DateTime sentAt, out TimeSpan timeToLastByte, out Exception exception) {
                SendAndReceive(parameterizedLogEntry, out sentAt, out timeToLastByte, out exception);
            } //TestSendAndReceive
            public void Dispose() {
                if (!_isDisposed)
                {
                    _isDisposed = true;
                    CloseConnection();
                    _connection.Dispose();
                    _connection = null;
                    _command.Dispose();
                    _command = null;
                    if(_reader != null)
                    _reader.Close();
                    _reader = null;
                }
            } //Dispose
        #endregion //Functions
        #region Free Coding
            //
            // Anything you want
            //
        #endregion //Free Coding
    } //ConnectionProxy
} //vApus.Stresstest</Code>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyCode>
      </Items>
      <Label>MSSQL @BRANCH@-@TM@</Label>
      <ShowInGui>True</ShowInGui>
      <IsDefaultItem>False</IsDefaultItem>
      <IsEmpty>False</IsEmpty>
    </ConnectionProxy>
  </Items>
</ConnectionProxies>
