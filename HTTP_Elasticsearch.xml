<ConnectionProxies>
  <Items>
    <ConnectionProxy>
      <Items>
        <ConnectionProxyRuleSet>
          <Items>
            <ConnectionProxySyntaxItem>
              <Items>
                <Rule>
                  <Items />
                  <RegExp>
                  </RegExp>
                  <IgnoreCase>False</IgnoreCase>
                  <ValueType>stringType</ValueType>
                  <UsePasswordChar>False</UsePasswordChar>
                  <Description>
                  </Description>
                  <Label>
                  </Label>
                  <ShowInGui>True</ShowInGui>
                  <IsDefaultItem>False</IsDefaultItem>
                  <IsEmpty>False</IsEmpty>
                </Rule>
              </Items>
              <DefaultValue>
              </DefaultValue>
              <Description>Provide the hostname, an IPv4 address, or an IPv6 address enclosed in "[ ]". Examples: www.cooldomain.com, 192.168.2.3 or [2001:db8:85a3:8d3:1319:8a2e:370:7348]. This value is overriden with the log's value when #MULTICONNECTION is used.</Description>
              <Label>Host</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
            <ConnectionProxySyntaxItem>
              <Items>
                <Rule>
                  <Items />
                  <RegExp>
                  </RegExp>
                  <IgnoreCase>False</IgnoreCase>
                  <ValueType>stringType</ValueType>
                  <UsePasswordChar>False</UsePasswordChar>
                  <Description>
                  </Description>
                  <Label>
                  </Label>
                  <ShowInGui>True</ShowInGui>
                  <IsDefaultItem>False</IsDefaultItem>
                  <IsEmpty>False</IsEmpty>
                </Rule>
              </Items>
              <DefaultValue>http</DefaultValue>
              <Description>Fill in https for example. If nothing is filled in, http is used. This value is overriden with the log's value when #MULTICONNECTION is used.</Description>
              <Label>Protocol</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
            <ConnectionProxySyntaxItem>
              <Items>
                <Rule>
                  <Items />
                  <RegExp>
                  </RegExp>
                  <IgnoreCase>False</IgnoreCase>
                  <ValueType>ushortType</ValueType>
                  <UsePasswordChar>False</UsePasswordChar>
                  <Description>
                  </Description>
                  <Label>
                  </Label>
                  <ShowInGui>True</ShowInGui>
                  <IsDefaultItem>False</IsDefaultItem>
                  <IsEmpty>False</IsEmpty>
                </Rule>
              </Items>
              <DefaultValue>9200</DefaultValue>
              <Description>Port used to connect to the webserver.By default this is set to 80. Beware to update the used port to match the protocol. This value is overriden with the log's value when #MULTICONNECTION is used.</Description>
              <Label>Port</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
          </Items>
          <Connected>False</Connected>
          <TracertField>1</TracertField>
          <ChildDelimiter>&lt;16 0C 02 12$&gt;</ChildDelimiter>
          <Description>
          </Description>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyRuleSet>
        <ConnectionProxyCode>
          <Items />
          <Code>/*
    ConnectionProxy generated by vApus
    vApus is Copyrighted by Sizing Servers Lab
    University College of West-Flanders, Department GKG
    
    Note: If you want to edit this connection proxy code you need to know what you are doing. You might break your stresstest.
    
    VERSION @BRANCH@-@TM@
*/

// The following line is used to add references when compiling, you can edit this here or in the references tab page. Please use the 'Browse...' button for dlls that are not in the GAC.
// dllreferences:System.Core.dll;System.Data.dll;System.dll;System.Web.dll;System.Windows.Forms.dll;vApus.Stresstest.dll;vApus.Util.dll;System.Json.dll;

#region Preprocessors
    // Enable DEBUG mode
    //#define DEBUGMODEMODE
    
    // This preprocessor disabes .NET's own cookieparser and uses our own implementation instead. This should only be used when
    // the cookiedomain is different than the used Connection, when cookies from another domain are discarded. For example a
    // website sets its cookiedomain to ".cooldomain.com" but for testing we use a plain IP as Connection. In this case .NET
    // would discard our cookies, which could break our test. Using this preprocessor rewrites the Connection Proxy to use a
    // custom parser that works around this security feature.
    //#define USECUSTOMCOOKIEPARSER
    
    // When used, the Connection set in vApus will be ignored for the stresstest. The logged "Destination Host" is used instead.
    // This is sometimes necessary if for example authentication is redirected to a secondary server or if cookie-free
    // subdomains (or CDNs) are used to serve static content.
    // For this setting to work, the "Destination Host" value must be available in the Log.
    // Note: It is recommended to use this setting when testing a HTTPS website.
    // Note: This setting is not used while testing the Connection, so be sure to always setup a valid Connection in vApus.
    //#define USEMULTICONNECTION
    
    // ASP.NET websites usually use "viewstates" when submitting forms. Use the following preprocessor if this is the case.
    // When using this preprocessor, don't forget to set the _viewstate_urls array in "Custom Fields" and replace logged
    // viewstates and eventvalidations in your Log by the @replaceViewstate and @replaceEventvalidation tokens.
    //#define USEASPNET
    
    // Drupal websites usually use "formtokens" when submitting forms. Use the following preprocessor if this is the case.
    // When using this preprocessor, don't forget to set the _formtoken_urls array in "Custom Fields" and replace logged
    // formids and formtokens in your Log by the @replaceFormId and @replaceFormToken tokens.
    // WARNING: This feature hasn't been properly tested yet!
    //#define USEDRUPAL
    
    // Chamilo preprocessor. More (Dutch) explanation in HTTP_CHAMILO_README.txt.
    //#define USECHAMILO
    
    // PHPBB example preprocessor.
    //#define USEPHPBB
    
    // Set the logged Referer HTTP header in requests.
    //#define USEREFERER
    
    // Some applications use custom HTTP headers. Use this preprocessor in combination with the _custom_headers array to
    // to add this fucntionality to the test.
    //#define USECUSTOMHEADERS
#endregion // Preprocessors

#region Usings
    using System;
    using System.Data;
    using System.Diagnostics;
    using System.IO;
    using System.IO.Compression;
    using System.Linq;
    using System.Net;
    using System.Net.Security;
    using System.Web;
    using System.Windows.Forms;
    using System.Security.Cryptography.X509Certificates;
    using vApus.Util;
    using System.Json;
    
    // EXPERIMENTAL //
    //using System.Reflection;
    
    //
    // CUSTOMIZATION:
    //    Put your own usings here.
    //
#endregion // Usings

namespace vApus.Stresstest
{
    public class ConnectionProxy : IConnectionProxy
    {
        
        #region Fields
            Stopwatch _stopwatch = new Stopwatch();
            bool _isDisposed;
            // Please do not edit the following lines (RuleSetFields).
            // -- RuleSetFields --
            System.String _connectionProxySyntaxItem0 = string.Empty; // Host
            System.String _connectionProxySyntaxItem1 = "http"; // Protocol [The default value for this syntax item is used if no value is provided in the connection.]
            System.UInt16 _connectionProxySyntaxItem2 = 9200; // Port [The default value for this syntax item is used if no value is provided in the connection.]
            // -- RuleSetFields --
            
            StringTree _parameterizedLogEntry;
            HttpWebRequest _httpWebRequest;
            HttpWebResponse _httpWebResponse;
            CookieCollection _cookieCollection;
            CookieDecoder _cookieDecoder;
            StreamReader _streamReader;
            char[] _buffer = new char[1024]; int _count = -1;
            // Labels, for the index values of the StringTree nodes (eg. int ip = 0).
            const int _relativeUrl = 0, _requestMethod = 1, _getData = 2, _postData = 3, _cookies = 4, _userAgent = 5, _contentType = 6, _sourceIP = 7, _destinationIP = 8, _destinationHost = 9, _beginTimestamp = 10, _endTimestamp = 11, _destinationPort = 12, _protocol = 13, _accept = 14, _referer = 15;
            
            //
            // CUSTOMIZATION:
            //    Custom variables.
            //
            
            
            // This parameter is used in combination with the USECUSTOMHEADERS preprocessor. This array defines custom HTTP
            // headers used by the application.
            #if USECUSTOMHEADERS
                string [] _custom_headers = { "Accept-Language: nl-BE" };
            #endif
            
            // Example of a custom sting you need extracted and inserted in GET and/or POST data (usually an ID of some sort).
            #if USEPHPBB
                string _sid = string.Empty;
            #endif
        #endregion // Fields
        
        #region Properties
            public bool IsConnectionOpen
            {
                get
                {
                    return true;
                }
            }
            public bool IsDisposed
            {
                get
                {
                    return _isDisposed;
                }
            }
        #endregion // Properties
        
        public ConnectionProxy()
        {
            // Trust all certificates for https testing.
            ServicePointManager.ServerCertificateValidationCallback = (object sender, X509Certificate cert, X509Chain chain, SslPolicyErrors errors) =&gt; { return true; };
            
            #if DEBUGMODEMODE
                EventPanel.AddEvent("Enabled preprocessors:");
                #if USELOGGEDCOOKIES
                    EventPanel.AddEvent("  USELOGGEDCOOKIES");
                #endif
                #if USECUSTOMCOOKIEPARSER
                    EventPanel.AddEvent("  USECUSTOMCOOKIEPARSER");
                #endif
                #if USEMULTICONNECTION
                    EventPanel.AddEvent("  USEMULTICONNECTION");
                #endif
                #if USEASPNET
                    EventPanel.AddEvent("  USEASPNET");
                #endif
                #if USEDRUPAL
                    EventPanel.AddEvent("  USEDRUPAL");
                #endif
                #if USECHAMILO
                    EventPanel.AddEvent("  USECHAMILO");
                #endif
                #if USEPHPBB
                    EventPanel.AddEvent("  USEPHPBB");
                #endif
                #if USEREFERER
                    EventPanel.AddEvent("  USEREFERER");
                #endif
                #if USECUSTOMHEADERS
                    EventPanel.AddEvent("  USECUSTOMHEADERS");
                #endif
                
                EventPanel.AddEvent("ConnectionProxy Syntax Items:"
                + "\n  0: " + _connectionProxySyntaxItem0
                + "\n  1: " + _connectionProxySyntaxItem1);
            #endif
        }
        
        #region Functions
            public static bool IsClearedOnTest = false; // doesn't really seem to be working
            
            public void ClearESCache()
            {
                if(IsClearedOnTest)
                return;
                
                try
                {
                    HttpWebRequest wr = (HttpWebRequest)System.Net.WebRequest.Create(new Uri(_connectionProxySyntaxItem1 + "://" + _connectionProxySyntaxItem0 + ":9200"
                    + "/_cache/clear")); // hacky hacky
                    
                    MessageBox.Show(_connectionProxySyntaxItem1 + "://" + _connectionProxySyntaxItem0 + ":9200"
                    + "/_cache/clear");
                    
                    
                    wr.Method = "POST";
                    wr.Timeout = 1050;
                    using(HttpWebResponse resp = (HttpWebResponse) wr.GetResponse())
                    {
                        
                        IsClearedOnTest = true;
                        
                        if(resp.StatusCode != HttpStatusCode.OK)
                        throw new Exception("IT WAS NOT OK");
                    }
                    
                    
                }
                catch(Exception e)
                {
                    MessageBox.Show("Couldn't clear cache.  Help us, god.\n" + e.Message);
                }
                
            }
            
            public void TestConnection(out string error)
            {
                error = null;
                
                try
                {
                    _httpWebRequest = (HttpWebRequest)System.Net.WebRequest.Create(new Uri(_connectionProxySyntaxItem1 + "://" + _connectionProxySyntaxItem0 + ":9200"));
                    _httpWebRequest.UserAgent = "vApus - Test connection function";
                    _httpWebRequest.Timeout = 6000;
                    _httpWebRequest.ReadWriteTimeout = _httpWebRequest.Timeout;
                    _httpWebRequest.KeepAlive = false;
                    _httpWebRequest.AllowAutoRedirect = false;
                    _httpWebRequest.ServicePoint.Expect100Continue = false;
                    _httpWebRequest.ServicePoint.ConnectionLimit = 1;
                    _httpWebRequest.Method = "GET";
                    _httpWebRequest.ContentLength = 0;
                    
                    _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                    
                    if (_httpWebResponse.StatusCode == HttpStatusCode.NotFound)
                    {
                        throw new Exception("Page not found!");
                    }
                    
                    if (_httpWebResponse.ContentEncoding.ToLower().Contains("gzip"))
                    {
                        _streamReader = new StreamReader(new GZipStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                    }
                    else if (_httpWebResponse.ContentEncoding.ToLower().Contains("deflate"))
                    {
                        _streamReader = new StreamReader(new DeflateStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                    }
                    else
                    {
                        _streamReader = new StreamReader(_httpWebResponse.GetResponseStream(), (_httpWebResponse.ContentEncoding.Length != 0) ?
                        System.Text.Encoding.GetEncoding(_httpWebResponse.ContentEncoding) : System.Text.Encoding.GetEncoding(1252));
                    }
                }
                catch (Exception ex)
                {
                    error = ex.ToString();
                }
                finally
                {
                    _cookieCollection = null;
                    if (_streamReader != null)
                    {
                        try
                        {
                            _streamReader.Close();
                            _streamReader.Dispose();
                            _streamReader = null;
                        }
                        catch
                        {
                        }
                    }
                }
                
                // ClearESCache(); // clear ES caches before starting the test;
            }
            
            public void OpenConnection()
            {
                if (!IsConnectionOpen)
                {
                    //
                    // ...
                    //
                }
            }
            
            public void CloseConnection()
            {
                if (IsConnectionOpen)
                {
                    //
                    // ...
                    //
                }
            }
            
            public string NextToSearch = "";
            
            public void SendAndReceive(StringTree parameterizedLogEntry, out DateTime sentAt, out TimeSpan timeToLastByte, out Exception exception)
            {
                _parameterizedLogEntry = parameterizedLogEntry;
                exception = null;
                
                //
                // parameterizedLogEntry is the log entry parsed to a String Tree using the Log Rule Set.
                // String Tree is a simple class: it can have either a value (property: string Value) or childs who are also String Trees (e.g. StringTree foo = parameterizedLogEntry[n] where n is an integer value).
                // You can get the combined value of the childs using the function CombineValues() (not shallow, returns a string), this uses the child delimiters in the rule set to glue these values together.
                //
                
                //
                // Initiate other stuff here.
                // (eg. Fields or functions from the free coding section.)
                //
                
                if (_isDisposed)
                {
                    sentAt = DateTime.Now;
                    timeToLastByte = new TimeSpan();
                    return;
                }
                try
                {
                    sentAt = DateTime.Now;
                    _stopwatch.Start();
                    try
                    {
                        //
                        // Send the request to the server here.
                        //
                        
                        InitHttpWebRequest();
                        ApplyPostData();
                        _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                        
                        if (_httpWebResponse.StatusCode == HttpStatusCode.NotFound)
                        {
                            throw new Exception("Page not found!");
                        }
                        
                        if (_httpWebResponse.ContentEncoding.ToLower().Contains("gzip"))
                        {
                            _streamReader = new StreamReader(new GZipStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                        }
                        else if (_httpWebResponse.ContentEncoding.ToLower().Contains("deflate"))
                        {
                            _streamReader = new StreamReader(new DeflateStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                        }
                        else
                        {
                            _streamReader = new StreamReader(_httpWebResponse.GetResponseStream(), (_httpWebResponse.ContentEncoding.Length != 0) ?
                            System.Text.Encoding.GetEncoding(_httpWebResponse.ContentEncoding) : System.Text.Encoding.GetEncoding(1252));
                        }
                        
                        //    var val = JsonValue.Parse(_streamReader.ReadLine());
                        
                        // string nextURL = "en-wikipedia/page/" + (string)val["hits"]["hits"][0]["_id"];
                        // MessageBox.Show(nextURL);
                        
                        
                        //
                        // CUSTOMIZATION:
                        //    You can put your own code for extracting data from the response here. When making changes, don't forget to invoke DownloadResponse().
                        //    Before making any changes, please understand the workings of the Connection Proxy or ask help
                        
                        
                        //
                        // CUSTOMIZATION:
                        //    Put your code for cookie data extraction here
                    }
                    catch (Exception ex)
                    {
                        exception = ex;
                        #if DEBUGMODEMODE
                            EventPanel.AddEvent("SendAndReceive Exception: " + exception.Message);
                        #endif
                    }
                    finally
                    {
                        //
                        // Close stuff if needed.
                        //
                        
                        if (_streamReader != null)
                        {
                            try
                            {
                                _streamReader.Close();
                                _streamReader.Dispose();
                            }
                            finally
                            {
                                _streamReader = null;
                            }
                        }
                    }
                }
                catch
                {
                    //
                    // Always throw the exception, if any, if 'stuff' cannot be closed.
                    // vApus will handle it as a connection problem.
                    //
                    
                    throw;
                }
                finally
                {
                    _stopwatch.Stop();
                    timeToLastByte = _stopwatch.Elapsed;
                    _stopwatch.Reset();
                }
            }
            
            public void Dispose()
            {
                if (!_isDisposed)
                {
                    _isDisposed = true;
                    try
                    {
                        // Timeout immediately.
                        _httpWebRequest.Abort();
                    }
                    catch { }
                    _httpWebRequest = null;
                    _httpWebResponse = null;
                    _cookieCollection = null;
                    _cookieDecoder = null;
                    if (_streamReader != null)
                    {
                        try
                        {
                            _streamReader.Close();
                            _streamReader.Dispose();
                            _streamReader = null;
                        }
                        catch { }
                    }
                }
            }
        #endregion // Functions
        
        #region Free Coding
            private void InitHttpWebRequest()
            {
                string relUrl = _parameterizedLogEntry[_relativeUrl].Value;
                string getData = _parameterizedLogEntry[_getData].CombineValues();
                
                Destination dest = GetDestination();
                _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("{0}://{1}:{2}{3}{4}",
                dest.Protocol, dest.Host, dest.Port, relUrl, getData)));
                
                // Set the HTTP request method (GET/POST).
                _httpWebRequest.Method = _parameterizedLogEntry[_requestMethod].Value;
                // Set the Accept header.
                _httpWebRequest.Accept = _parameterizedLogEntry[_accept].Value;
                // Set the Referer header.
                #if USEREFERER
                    _httpWebRequest.Referer = _parameterizedLogEntry[_referer].Value;
                #endif
                // A 60 second timeout should be reasonable.
                _httpWebRequest.Timeout = 60000;
                _httpWebRequest.ReadWriteTimeout = _httpWebRequest.Timeout;
                // Allow keepalive.
                _httpWebRequest.KeepAlive = true;
                // Allow compression.
                _httpWebRequest.Headers.Add("Accept-Encoding: gzip, deflate");
                // Set the Accept-Language header.
                _httpWebRequest.Headers.Add("Accept-Language: en-US");
                // Don't autoredirect: redirects are already logged.
                _httpWebRequest.AllowAutoRedirect = false;
                // Set the initial content length to 0.
                _httpWebRequest.ContentLength = 0;
                // Fancy stuff.
                _httpWebRequest.ServicePoint.Expect100Continue = false;
                _httpWebRequest.ServicePoint.ConnectionLimit = (this.GetParent() as ConnectionProxyPool).PoolSize;
                
                #if DEBUGMODEMODE
                    _httpWebRequest.Headers.Add("vApus-User: " + System.Threading.Thread.CurrentThread.Name);
                #endif
                
                // EXPERIMENTAL - Allways set KeepAlive header //
                //_httpWebRequest.ServicePoint.GetType().GetProperty("HttpBehaviour", BindingFlags.Instance | BindingFlags.NonPublic).SetValue(_httpWebRequest.ServicePoint, (byte)0, null);
                
                #if USECUSTOMHEADERS
                    foreach (string header in _custom_headers) {
                        _httpWebRequest.Headers.Add(header);
                    }
                #endif
            }
            
            private void InitCookies()
            {
                if (_cookieCollection == null)
                {
                    _httpWebRequest.CookieContainer = new CookieContainer();
                    _cookieCollection = new CookieCollection();
                    _cookieDecoder = new CookieDecoder();
                }
            }
            
            private void ApplyPostData() 
            {
                if (_parameterizedLogEntry[_postData].Value.Length != 0)
                {
                    string postData = _parameterizedLogEntry[_postData].Value;
                    
                    _httpWebRequest.ContentLength = postData.Length;
                    _httpWebRequest.ContentType = String.IsNullOrEmpty(_parameterizedLogEntry[_contentType].Value) ? "application/x-www-form-urlencoded" : _parameterizedLogEntry[_contentType].Value;
                    Stream postStream = _httpWebRequest.GetRequestStream();
                    StreamWriter postStreamWriter = new StreamWriter(postStream);
                    postStreamWriter.Write(postData);
                    postStreamWriter.Flush();
                    
                    postStreamWriter.Close();
                    postStreamWriter.Dispose();
                    postStreamWriter = null;
                    
                    postStream.Close();
                }
            }
            
            private Destination GetDestination()
            {
                #if USEMULTICONNECTION
                    return new Destination() { Protocol = _parameterizedLogEntry[_protocol].Value, Host = _parameterizedLogEntry[_destinationHost].Value , Port = _parameterizedLogEntry[_destinationPort].Value };
                    #else
                    return new Destination() { Protocol = _connectionProxySyntaxItem1, Host = _connectionProxySyntaxItem0, Port = _connectionProxySyntaxItem2.ToString() };
                #endif
            }
            
            //private string getStringBetween(string s, string before, string after) {
                //s = s.Substring(s.IndexOf(before, StringComparison.InvariantCultureIgnoreCase) + before.Length);
                //int endIndex = s.IndexOf(after, StringComparison.InvariantCultureIgnoreCase);
                //return s.Substring(0, endIndex);
            //}
            
            // Downloads the full response and returns the page.
            // If discard is set (default), the response will be buffered in small blocks and discarded.
            // If we want to keep the full response for parsing, set discard = false.
            private string DownloadResponse(bool discard = true)
            {
                if (discard)
                {
                    do
                    {
                        _count = _streamReader.Read(_buffer, 0, 1024);
                    } while (_count != 0);
                }
                else
                {
                    return _streamReader.ReadToEnd();
                }
                
                return string.Empty;
            }
            
            private struct Destination
            {
                public string Protocol, Host, Port;
            }
        #endregion // Free Coding
    } // ConnectionProxy
    
    public static class StringExtensions
    {
        public static string GetStringBetween(this string s, string before, string after)
        {
            s = s.Substring(s.IndexOf(before, StringComparison.InvariantCultureIgnoreCase) + before.Length);
            int endIndex = s.IndexOf(after, StringComparison.InvariantCultureIgnoreCase);
            return s.Substring(0, endIndex);
        }
    } // StringExtensions
    
} // vApus.Stresstest</Code>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyCode>
      </Items>
      <Label>HTTP Elasticsearch @BRANCH@-@TM@</Label>
      <ShowInGui>True</ShowInGui>
      <IsDefaultItem>False</IsDefaultItem>
      <IsEmpty>False</IsEmpty>
    </ConnectionProxy>
  </Items>
</ConnectionProxies>