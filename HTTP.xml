<ConnectionProxies>
  <Items>
    <ConnectionProxy>
      <Items>
        <ConnectionProxyRuleSet>
          <Items>
            <ConnectionProxySyntaxItem>
              <Items>
                <Rule>
                  <Items />
                  <RegExp>
                  </RegExp>
                  <IgnoreCase>False</IgnoreCase>
                  <ValueType>stringType</ValueType>
                  <UsePasswordChar>False</UsePasswordChar>
                  <Description>
                  </Description>
                  <Label>
                  </Label>
                  <ShowInGui>True</ShowInGui>
                  <IsDefaultItem>False</IsDefaultItem>
                  <IsEmpty>False</IsEmpty>
                </Rule>
              </Items>
              <Description>Must start with 'http://' and may not end with /.</Description>
              <Label>URL</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
          </Items>
          <Connected>False</Connected>
          <TracertField>1</TracertField>
          <ChildDelimiter>
          </ChildDelimiter>
          <Description>
          </Description>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyRuleSet>
        <ConnectionProxyCode>
          <Items />
          <Threads>1</Threads>
          <Code>//Connection Proxy Document
/*
    ConnectionProxy generated by vApus
    vApus is Copyrighted by Sizing Servers Lab
    University College of West-Flanders, Department GKG
	
	VERSION STABLE-@TM
*/

// dllreferences:System.dll;System.Data.dll;vApus.Util.dll;vApus.Stresstest.dll;System.Web.dll;

#region Preprocessors
    // Use this preprocessor if you want to use the logged cookies. This will discard any cookies set by the server during
    // the test and only use those that are specified in the Log.
    //#define USELOGGEDCOOKIES
    
    // When used, the Connection set in vApus will be ignored for the stresstest. The logged "Destination Host" is used instead.
    // This is sometimes necessary if for example authentication is redirected to a secondary server or if cookie-free
    // subdomains (or CDNs) are used to serve static content.
    // For this setting to work, the "Destination Host" value must be available in the Log.
    // This setting is not used while testing the Connection, so be sure to always setup a valid Connection in vApus.
    //#define USEMULTICONNECTION
    
    // ASP.NET websites usually use "viewstates" when submitting forms. Use the following preprocessor if this is the case.
    // When using this preprocessor, don't forget to set the _viewstate_urls array in "Custom Fields" and replace logged
    // viewstates and eventvalidations in your Log by the @replaceViewstate and @replaceEventvalidation tokens.
    //#define USEVIEWSTATE
    
    // Some applications use custom HTTP headers. Use this preprocessor in combination with the _custom_headers array to
    // to add this fucntionality to the test.
    //#define USECUSTOMHEADERS
#endregion //Preprocessors
#region Default Usings
    using System;
    using System.Data;
    using System.Diagnostics;
    // Contains the StringTree class.
    using vApus.Util;
#endregion //Default Usings
#region Custom Usings
    using System.IO;
    using System.Net;
    using System.IO.Compression;
    using System.Web;
#endregion //Custom Usings
namespace vApus.Stresstest {
    public class ConnectionProxy : IConnectionProxy {
        #region Default Fields
            Stopwatch _stopwatch = new Stopwatch();
            bool _isDisposed;
            // -- RuleSetFields --
            System.String _connectionProxySyntaxItem0 = string.Empty; // URL
            // -- RuleSetFields --
            
        #endregion //Default Fields
        #region Custom Fields
            //
            // Here you can put labels, for instance, for the index values of the String Tree nodes (eg. int ip = 0).
            //
            
            StringTree _parameterizedLogEntry;
            HttpWebRequest _httpWebRequest;
            HttpWebResponse _httpWebResponse;
            CookieCollection _cookieCollection;
            StreamReader _streamReader;
            const int _relativeUrl = 0, _requestMethod = 1, _getData = 2, _postData = 3, _cookies = 4, _userAgent = 5, _contentType = 6, _sourceIP = 7, _destinationIP = 8, _destinationHost = 9, _beginTimestamp = 10, _endTimestamp = 11;
            string _viewstate = string.Empty, _eventvalidation = string.Empty;
            
            //
            // CUSTOMIZATION
            //
            
            // This parameter is used in combination with the USEVIEWSTATE preprocessor. This array defines the relative URLs
            // where a viewstate can be extracted.
            //string [] _viewstate_urls = { "/Default.aspx" };
            
            // This parameter is used in combination with the USECUSTOMHEADERS preprocessor. This array defines custom HTTP
            // headers used by the application.
            //string [] _custom_headers = { "Accept-Language: nl-BE" };
            
            // Example of a custom sting you need extracted and inserted in GET and/or POST data (usually an ID of some sort).
            // Throughout this connection proxy are blocks of example code commented for this specific usage.
            //string _some_var = string.Empty;
        #endregion //Custom Fields
        #region Properties
            public bool IsConnectionOpen { get {
                return true;
            }} //IsConnectionOpen
            public bool IsDisposed { get {
                return _isDisposed;
            }} //IsDisposed
        #endregion //Properties
        public ConnectionProxy() {
            
        } //ConnectionProxy
        #region Functions
            public void TestConnection(out string error) {
                error = null;
                
                try
                {
                    _httpWebRequest= (HttpWebRequest)System.Net.WebRequest.Create(new Uri(_connectionProxySyntaxItem0));
                    _httpWebRequest.UserAgent = "vApus v2 - Test connection function";
                    // 60 seconds seems reasonable.
                    _httpWebRequest.Timeout= 60000;
                    _httpWebRequest.ReadWriteTimeout = _httpWebRequest.Timeout;
                    _httpWebRequest.AllowAutoRedirect = false;
                    _httpWebRequest.ServicePoint.Expect100Continue = false;
                    
                    _httpWebRequest.ServicePoint.ConnectionLimit = 1;
                    
                    _httpWebRequest.Method = "GET";
                    _httpWebRequest.ContentLength = 0;
                    _httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    
                    _cookieCollection= new CookieCollection();
                    
                    HandleCookiesBeforeRequest();
                    _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                    
                    
                    if (_httpWebResponse.StatusCode == HttpStatusCode.NotFound)
                    {
                        throw new Exception("Page not found!");
                    }
                    
                    if (_httpWebResponse.ContentEncoding.ToLower().Contains("gzip"))
                    {
                        _streamReader = new StreamReader(new GZipStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                    }
                    else
                    {
                        _streamReader = new StreamReader(_httpWebResponse.GetResponseStream(), (_httpWebResponse.ContentEncoding.Length != 0) ?
                        System.Text.Encoding.GetEncoding(_httpWebResponse.ContentEncoding) : System.Text.Encoding.GetEncoding(1252));
                    }
                    
                    HandleCookiesAfterRequest();
                }
                catch (Exception ex)
                {
                    error = ex.ToString();
                }
                finally
                {
                    _cookieCollection= null;
                    if (_streamReader != null)
                    {
                        try
                        {
                            _streamReader.Close();
                            _streamReader.Dispose();
                            _streamReader = null;
                        }
                        catch
                        {
                        }
                    }
                }
            } //TestConnection
            public void OpenConnection() {
                if(!IsConnectionOpen)
                {
                    //
                    // ...
                    //
                }
            } //OpenConnection
            public void CloseConnection() {
                if(IsConnectionOpen)
                {
                    //
                    // ...
                    //
                }
            } //CloseConnection
            public void SendAndReceive(StringTree parameterizedLogEntry, out DateTime sentAt, out TimeSpan timeToLastByte, out Exception exception) {
                _parameterizedLogEntry = parameterizedLogEntry;
                exception = null;
                
                //
                // parameterizedLogEntry is the log entry parsed to a String Tree using the Log Rule Set.
                // String Tree is a simple class: it can have either a value (property: string Value) or childs who are also String Trees (e.g. StringTree foo = parameterizedLogEntry[n] where n is an integer value).
                // You can get the combined value of the childs using the function CombineValues() (not shallow, returns a string), this uses the child delimiters in the rule set to glue these values together.
                //
                
                //
                // Initiate other stuff here.
                // (eg. Fields or functions from the free coding section.)
                //
                
                if (_isDisposed)
                {
                    sentAt = DateTime.Now;
                    timeToLastByte = new TimeSpan();
                    return;
                }
                try
                {
                    sentAt = DateTime.Now;
                    _stopwatch.Start();
                    try
                    {
                        //
                        // Send the request to the server here.
                        //
                        
                        InitHttpWebRequest();
                        InitCookies();
                        HandleCookiesBeforeRequest();
                        ApplyPostData();
                        _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                        
                        if (_httpWebResponse.StatusCode == HttpStatusCode.NotFound)
                        {
                            throw new Exception("Page not found!");
                        }
                        
                        if (_httpWebResponse.ContentEncoding.ToLower().Contains("gzip"))
                        {
                            _streamReader = new StreamReader(new GZipStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                        }
                        else
                        {
                            _streamReader = new StreamReader(_httpWebResponse.GetResponseStream(), (_httpWebResponse.ContentEncoding.Length != 0) ?
                            System.Text.Encoding.GetEncoding(_httpWebResponse.ContentEncoding) : System.Text.Encoding.GetEncoding(1252));
                        }
                        
                        HandleCookiesAfterRequest();
                        
                        #if USEVIEWSTATE
                        bool match = false;
                        foreach (string url in _viewstate_urls) {
                            if (_parameterizedLogEntry[_relativeUrl].Value == url) {
                                match = true;
                                break;
                            }
                        }
                        
                        if (match &amp;&amp; _parameterizedLogEntry[_requestMethod].Value == "GET") {
                            string page = _streamReader.ReadToEnd();
                            
                            string firstUsablePart = page.Split(new string[] { "&lt;input type=\"hidden\" name=\"__VIEWSTATE\" id=\"__VIEWSTATE\" value=\"" }, StringSplitOptions.None)[1];
                            _viewstate = HttpUtility.UrlEncode(firstUsablePart.Split(new string[] {"\" /&gt;"}, StringSplitOptions.None)[0]);
                            //_viewstate = firstUsablePart.Split(new string[] {"\" /&gt;"}, StringSplitOptions.None)[0];
                            
                            string secondUsablePart =
                            firstUsablePart.Split(new string[] {"&lt;input type=\"hidden\" name=\"__EVENTVALIDATION\" id=\"__EVENTVALIDATION\" value=\""}, StringSplitOptions.None)[1];
                            _eventvalidation = HttpUtility.UrlEncode(secondUsablePart.Split(new string[] {"\" /&gt;"}, StringSplitOptions.None)[0]);
                            //_eventvalidation = secondUsablePart.Split(new string[] {"\" /&gt;"}, StringSplitOptions.None)[0];
                        }
                        #endif
                        
                        //if (_parameterizedLogEntry[_relativeUrl].Value == "/SomePage") {
                            //    var query = HttpUtility.ParseQueryString(_httpWebResponse.GetResponseHeader("Location"));
                            //    _some_var = query["something"];
                        //}
                    }
                    catch (Exception ex)
                    {
                        exception = ex;
                    }
                    finally
                    {
                        //
                        // Close stuff if needed.
                        //
                        
                        if (_streamReader != null)
                        {
                            try
                            {
                                _streamReader.Close();
                                _streamReader.Dispose();
                            }
                            finally
                            {
                                _streamReader = null;
                            }
                        }
                    }
                }
                catch
                {
                    //
                    // Always throw the exception, if any, if 'stuff' cannot be closed.
                    // vApus will handle it as a connection problem.
                    //
                    
                    throw;
                }
                finally
                {
                    _stopwatch.Stop();
                    timeToLastByte = _stopwatch.Elapsed;
                    _stopwatch.Reset();
                }
            } //SendAndReceive
            public void TestSendAndReceive(StringTree parameterizedLogEntry, out DateTime sentAt, out TimeSpan timeToLastByte, out Exception exception) {
                SendAndReceive(parameterizedLogEntry, out sentAt, out timeToLastByte, out exception);
            } //TestSendAndReceive
            public void Dispose() {
                if(!_isDisposed)
                {
                    _isDisposed = true;
                    _httpWebRequest = null;
                    _httpWebResponse = null;
                    _cookieCollection= null;
                    if (_streamReader != null)
                    {
                        try
                        {
                            _streamReader.Close();
                            _streamReader.Dispose();
                            _streamReader = null;
                        }
                        catch
                        {
                        }
                    }
                }
            } //Dispose
        #endregion //Functions
        #region Free Coding
            private void InitHttpWebRequest()
            {
                #if USEMULTICONNECTION
                if (_parameterizedLogEntry[_getData].Count != 0) {
                    string getData = _parameterizedLogEntry[_getData].CombineValues();
                    //if(_some_var != string.Empty) {
                        //    getData = getData.Replace("@replaceSomething", _some_var);
                    //}
                    
                    _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("http://{0}{1}?{2}",
                    _parameterizedLogEntry[_destinationHost].Value, _parameterizedLogEntry[_relativeUrl].Value,
                    getData)));
                }
                else {
                    _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("http://{0}{1}",
                    _parameterizedLogEntry[_destinationHost].Value, _parameterizedLogEntry[_relativeUrl].Value)));
                }
                
                #else
                if (_parameterizedLogEntry[_getData].Count != 0) {
                    string getData = _parameterizedLogEntry[_getData].CombineValues();
                    //if(_some_var != string.Empty) {
                        //    getData = getData.Replace("@replaceSomething", _some_var);
                    //}
                    
                    _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("{0}{1}?{2}",
                    _connectionProxySyntaxItem0, _parameterizedLogEntry[_relativeUrl].Value,
                    getData)));
                }
                else {
                    _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("{0}{1}",
                    _connectionProxySyntaxItem0, _parameterizedLogEntry[_relativeUrl].Value)));
                }
                
                #endif
                
                _httpWebRequest.UserAgent = _parameterizedLogEntry[_userAgent].Value;
                // 60 seconds seems reasonable.
                _httpWebRequest.Timeout= 60000;
                _httpWebRequest.ReadWriteTimeout = _httpWebRequest.Timeout;
                _httpWebRequest.AllowAutoRedirect = false;
                _httpWebRequest.ServicePoint.Expect100Continue = false;
                
                _httpWebRequest.ServicePoint.ConnectionLimit = (this.GetParent() as ConnectionProxyPool).PoolSize;
                
                _httpWebRequest.Method = _parameterizedLogEntry[_requestMethod].Value;
                _httpWebRequest.ContentLength = 0;
                
                _httpWebRequest.ContentType = String.IsNullOrEmpty(_parameterizedLogEntry[_contentType].Value) ? "application/x-www-form-urlencoded" : _parameterizedLogEntry[_contentType].Value;
                
                #if USECUSTOMHEADERS
                foreach (string header in _custom_headers) {
                    _httpWebRequest.Headers.Add(header);
                }
                #endif
            }
            
            private void InitCookies()
            {
                if (_cookieCollection == null)
                {
                    _cookieCollection = new CookieCollection();
                }
                
                #if USELOGGEDCOOKIES
                foreach (var kvp in _parameterizedLogEntry[_cookies]) {
                    string key = kvp[0].Value.TrimStart();
                    string value = ((kvp.Count == 1) ? string.Empty : kvp[1].Value);
                    
                    int cookieIndex = GetCookieIndex(key);
                    if (cookieIndex == -1) {
                        Cookie cookie = new Cookie(key, value);
                        
                        // Trim http://
                        cookie.Domain = _connectionProxySyntaxItem0.Substring(7);
                        _cookieCollection.Add(cookie);
                    }
                }
                #endif
            }
            
            private void ApplyPostData()
            {
                if (_parameterizedLogEntry[_postData].Value.Length != 0)
                {
                    string postData = _parameterizedLogEntry[_postData].Value;
                    
                    #if USEVIEWSTATE
                    bool match = false;
                    foreach (string url in _viewstate_urls) {
                        if (_parameterizedLogEntry[_relativeUrl].Value == url) {
                            match = true;
                            break;
                        }
                    }
                    
                    if (match &amp;&amp; _viewstate != string.Empty) {
                        postData = postData.Replace("@replaceViewstate", _viewstate).Replace("@replaceEventvalidation", _eventvalidation);
                    }
                    #endif
                    
                    //if (_some_var != string.Empty) {
                        //    postData = postData.Replace("@replaceSomething", _some_var);
                    //}
                    
                    _httpWebRequest.ContentLength = postData.Length;
                    Stream postStream = _httpWebRequest.GetRequestStream();
                    StreamWriter postStreamWriter = new StreamWriter(postStream);
                    postStreamWriter.Write(postData);
                    postStreamWriter.Flush();
                    
                    postStreamWriter.Close();
                    postStreamWriter.Dispose();
                    postStreamWriter = null;
                    
                    postStream.Close();
                }
            }
            
            private void HandleCookiesBeforeRequest()
            {
                _httpWebRequest.CookieContainer = new CookieContainer();
                _httpWebRequest.CookieContainer.Add(_cookieCollection);
            }
            
            private void HandleCookiesAfterRequest()
            {
                if (_httpWebRequest.CookieContainer.Count != 0)
                {
                    foreach (Cookie cookie in _httpWebRequest.CookieContainer.GetCookies(_httpWebRequest.RequestUri))
                    {
                        int cookieIndex = GetCookieIndex(cookie.Name);
                        if (cookieIndex == -1)
                        {
                            _cookieCollection.Add(cookie);
                        }
                        else
                        {
                            _cookieCollection[cookieIndex].Value = cookie.Value;
                        }
                    }
                }
                if (_httpWebResponse.Cookies.Count != 0)
                {
                    foreach (Cookie cookie in _httpWebResponse.Cookies)
                    {
                        
                        int cookieIndex = GetCookieIndex(cookie.Name);
                        if (cookieIndex == -1)
                        {
                            _cookieCollection.Add(cookie);
                        }
                        else
                        {
                            _cookieCollection[cookieIndex].Value = cookie.Value;
                        }
                    }
                }
            }
            
            private int GetCookieIndex(string cookieName)
            {
                for (int i = 0; i &lt; _cookieCollection.Count; i++)
                {
                    if (_cookieCollection[i].Name == cookieName)
                    {
                        return i;
                    }
                }
                return -1;
            }
        #endregion //Free Coding
    } //ConnectionProxy
} //vApus.Stresstest</Code>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyCode>
      </Items>
      <Label>HTTP</Label>
      <ShowInGui>True</ShowInGui>
      <IsDefaultItem>False</IsDefaultItem>
      <IsEmpty>False</IsEmpty>
    </ConnectionProxy>
  </Items>
</ConnectionProxies>