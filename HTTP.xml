<ConnectionProxies>
  <Items>
    <ConnectionProxy>
      <Items>
        <ConnectionProxyRuleSet>
          <Items>
            <ConnectionProxySyntaxItem>
              <Items>
                <Rule>
                  <Items />
                  <RegExp>
                  </RegExp>
                  <IgnoreCase>False</IgnoreCase>
                  <ValueType>stringType</ValueType>
                  <UsePasswordChar>False</UsePasswordChar>
                  <Description>
                  </Description>
                  <Label>
                  </Label>
                  <ShowInGui>True</ShowInGui>
                  <IsDefaultItem>False</IsDefaultItem>
                  <IsEmpty>False</IsEmpty>
                </Rule>
              </Items>
              <Description>Must start with 'http://' and may not end with /.</Description>
              <Label>URL</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
          </Items>
          <Connected>False</Connected>
          <TracertField>1</TracertField>
          <ChildDelimiter>
          </ChildDelimiter>
          <Description>
          </Description>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyRuleSet>
        <ConnectionProxyCode>
          <Items />
          <Code>/*
    ConnectionProxy generated by vApus
    vApus is Copyrighted by Sizing Servers Lab
    University College of West-Flanders, Department GKG
    
    Note: If you want to edit this connection proxy code you need to know what you are doing. You might break your stresstest.
    	
    	VERSION @BRANCH@-@TM@
*/

// The following line is used to add references when compiling, you can edit this here or in the references tab page. Please use the 'Browse...' button for dlls that are not in the GAC.
// dllreferences:System.dll;System.Data.dll;vApus.Util.dll;vApus.Stresstest.dll;System.Web.dll;System.Windows.Forms.dll;System.Core.dll;

#region Preprocessors
    //
    // e.g. #define NOTMUCHUSEDFEATURE
    //
    // Further in code:
    // #if NOTMUCHUSEDFEATURE
    // do stuff...
    // #endif
    
    // Use this preprocessor if you want to use the logged cookies. This will discard any cookies set by the server during
    // the test and only use those that are specified in the Log.
    //#define USELOGGEDCOOKIES
    
    // This preprocessor disabes .NET's own cookieparser and uses our own implementation instead. This should only be used when
    // the cookiedomain is different than the used Connection, when cookies from another domain are discarded. For example a
    // website sets its cookiedomain to ".cooldomain.com" but for testing we use a plain IP as Connection. In this case .NET
    // would discard our cookies, which could break our test. Using this preprocessor rewrites the Connection Proxy to use a
    // custom parser that works around this security feature.
    //#define USECUSTOMCOOKIEPARSER
    
    // When used, the Connection set in vApus will be ignored for the stresstest. The logged "Destination Host" is used instead.
    // This is sometimes necessary if for example authentication is redirected to a secondary server or if cookie-free
    // subdomains (or CDNs) are used to serve static content.
    // For this setting to work, the "Destination Host" value must be available in the Log.
    // This setting is not used while testing the Connection, so be sure to always setup a valid Connection in vApus.
    //#define USEMULTICONNECTION
    
    // ASP.NET websites usually use "viewstates" when submitting forms. Use the following preprocessor if this is the case.
    // When using this preprocessor, don't forget to set the _viewstate_urls array in "Custom Fields" and replace logged
    // viewstates and eventvalidations in your Log by the @replaceViewstate and @replaceEventvalidation tokens.
    //#define USEVIEWSTATE
    
    // Some applications use custom HTTP headers. Use this preprocessor in combination with the _custom_headers array to
    // to add this fucntionality to the test.
    //#define USECUSTOMHEADERS
#endregion // Preprocessors

#region Usings
    using System;
    using System.Data;
    using System.Diagnostics;
    // Contains the StringTree class.
    using vApus.Util;
    
    //
    // Here you can put your own usings under the default ones.
    //
    using System.IO;
    using System.Net;
    using System.IO.Compression;
    using System.Web;
    using System.Windows.Forms;
    using System.Linq;
    using System.Collections.Generic;
#endregion // Usings

namespace vApus.Stresstest {
    public class ConnectionProxy : IConnectionProxy {
        
        #region Fields
            Stopwatch _stopwatch = new Stopwatch();
            bool _isDisposed;
            // Please do not edit the following lines (RuleSetFields).
            // -- RuleSetFields --
            System.String _connectionProxySyntaxItem0 = string.Empty; // URL
            // -- RuleSetFields --
            
            //
            // Here you can put labels, for instance, for the index values of the String Tree nodes (eg. int ip = 0).
            //
            StringTree _parameterizedLogEntry;
            HttpWebRequest _httpWebRequest;
            HttpWebResponse _httpWebResponse;
            CookieCollection _cookieCollection;
            CookieDecoder _cookieDecoder;
            StreamReader _streamReader;
            const int _relativeUrl = 0, _requestMethod = 1, _getData = 2, _postData = 3, _cookies = 4, _userAgent = 5, _contentType = 6, _sourceIP = 7, _destinationIP = 8, _destinationHost = 9, _beginTimestamp = 10, _endTimestamp = 11;
            string _viewstate = string.Empty, _eventvalidation = string.Empty;
            
            //
            // CUSTOMIZATION
            //
            
            // This parameter is used in combination with the USEVIEWSTATE preprocessor. This array defines the relative URLs
            // where a viewstate can be extracted.
            //string [] _viewstate_urls = { "/Default.aspx" };
            
            // This parameter is used in combination with the USECUSTOMHEADERS preprocessor. This array defines custom HTTP
            // headers used by the application.
            //string [] _custom_headers = { "Accept-Language: nl-BE" };
            
            // Example of a custom sting you need extracted and inserted in GET and/or POST data (usually an ID of some sort).
            // Throughout this connection proxy are blocks of example code commented for this specific usage.
            //string _sid = string.Empty;
        #endregion // Fields
        
        #region Properties
            public bool IsConnectionOpen {
                get {
                    return true;
                }
            }
            public bool IsDisposed {
                get {
                    return _isDisposed;
                }
            }
        #endregion // Properties
        
        public ConnectionProxy() {
            
        }
        
        #region Functions
            public void TestConnection(out string error) {
                error = null;
                
                try {
                    _httpWebRequest= (HttpWebRequest)System.Net.WebRequest.Create(new Uri(_connectionProxySyntaxItem0));
                    _httpWebRequest.UserAgent = "vApus v2 - Test connection function";
                    // 60 seconds seems reasonable.
                    _httpWebRequest.Timeout= 60000;
                    _httpWebRequest.ReadWriteTimeout = _httpWebRequest.Timeout;
                    _httpWebRequest.AllowAutoRedirect = false;
                    _httpWebRequest.ServicePoint.Expect100Continue = false;
                    
                    _httpWebRequest.ServicePoint.ConnectionLimit = 1;
                    
                    _httpWebRequest.Method = "GET";
                    _httpWebRequest.ContentLength = 0;
                    _httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    
                    _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                    
                    
                    if (_httpWebResponse.StatusCode == HttpStatusCode.NotFound) {
                        throw new Exception("Page not found!");
                    }
                    
                    if (_httpWebResponse.ContentEncoding.ToLower().Contains("gzip")) {
                        _streamReader = new StreamReader(new GZipStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                    }
                    else {
                        _streamReader = new StreamReader(_httpWebResponse.GetResponseStream(), (_httpWebResponse.ContentEncoding.Length != 0) ?
                        System.Text.Encoding.GetEncoding(_httpWebResponse.ContentEncoding) : System.Text.Encoding.GetEncoding(1252));
                    }
                }
                catch (Exception ex) {
                    error = ex.ToString();
                }
                finally {
                    _cookieCollection= null;
                    if (_streamReader != null) {
                        try {
                            _streamReader.Close();
                            _streamReader.Dispose();
                            _streamReader = null;
                        }
                        catch {
                        }
                    }
                }
            }
            
            public void OpenConnection() {
                if (!IsConnectionOpen) {
                    //
                    // ...
                    //
                }
            }
            
            public void CloseConnection() {
                if (IsConnectionOpen) {
                    //
                    // ...
                    //
                }
            }
            
            public void SendAndReceive(StringTree parameterizedLogEntry, out DateTime sentAt, out TimeSpan timeToLastByte, out Exception exception) {
                _parameterizedLogEntry = parameterizedLogEntry;
                exception = null;
                
                //
                // parameterizedLogEntry is the log entry parsed to a String Tree using the Log Rule Set.
                // String Tree is a simple class: it can have either a value (property: string Value) or childs who are also String Trees (e.g. StringTree foo = parameterizedLogEntry[n] where n is an integer value).
                // You can get the combined value of the childs using the function CombineValues() (not shallow, returns a string), this uses the child delimiters in the rule set to glue these values together.
                //
                
                //
                // Initiate other stuff here.
                // (eg. Fields or functions from the free coding section.)
                //
                
                if (_isDisposed) {
                    sentAt = DateTime.Now;
                    timeToLastByte = new TimeSpan();
                    return;
                }
                try {
                    sentAt = DateTime.Now;
                    _stopwatch.Start();
                    try {
                        //
                        // Send the request to the server here.
                        //
                        
                        InitHttpWebRequest();
                        InitCookies();
                        HandleCookiesBeforeRequest();
                        ApplyPostData();
                        _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                        
                        if (_httpWebResponse.StatusCode == HttpStatusCode.NotFound) {
                            throw new Exception("Page not found!");
                        }
                        
                        if (_httpWebResponse.ContentEncoding.ToLower().Contains("gzip")) {
                            _streamReader = new StreamReader(new GZipStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                        }
                        else {
                            _streamReader = new StreamReader(_httpWebResponse.GetResponseStream(), (_httpWebResponse.ContentEncoding.Length != 0) ?
                            System.Text.Encoding.GetEncoding(_httpWebResponse.ContentEncoding) : System.Text.Encoding.GetEncoding(1252));
                        }
                        
                        HandleCookiesAfterRequest();
                        
                        #if USEVIEWSTATE
                        bool match = false;
                        foreach (string url in _viewstate_urls) {
                            if (_parameterizedLogEntry[_relativeUrl].Value == url) {
                                match = true;
                                break;
                            }
                        }
                        
                        if (match &amp;&amp; _parameterizedLogEntry[_requestMethod].Value == "GET") {
                            string page = _streamReader.ReadToEnd();
                            
                            string firstUsablePart = page.Split(new string[] { "&lt;input type=\"hidden\" name=\"__VIEWSTATE\" id=\"__VIEWSTATE\" value=\"" }, StringSplitOptions.None)[1];
                            _viewstate = HttpUtility.UrlEncode(firstUsablePart.Split(new string[] {"\" /&gt;"}, StringSplitOptions.None)[0]);
                            //_viewstate = firstUsablePart.Split(new string[] {"\" /&gt;"}, StringSplitOptions.None)[0];
                            
                            string secondUsablePart =
                            firstUsablePart.Split(new string[] {"&lt;input type=\"hidden\" name=\"__EVENTVALIDATION\" id=\"__EVENTVALIDATION\" value=\""}, StringSplitOptions.None)[1];
                            _eventvalidation = HttpUtility.UrlEncode(secondUsablePart.Split(new string[] {"\" /&gt;"}, StringSplitOptions.None)[0]);
                            //_eventvalidation = secondUsablePart.Split(new string[] {"\" /&gt;"}, StringSplitOptions.None)[0];
                        }
                        #endif
                        
                        //if (_parameterizedLogEntry[_relativeUrl].Value == "/index.php" || _parameterizedLogEntry[_relativeUrl].Value == "/ucp.php") {
                            //var query = HttpUtility.ParseQueryString(_httpWebResponse.GetResponseHeader("Location"));
                            //_some_var = query["some_query"];
                            //_sid = _cookieCollection["phpbb3_ek7cb_sid"].Value;
                        //}
                    }
                    catch (Exception ex) {
                        exception = ex;
                        MessageBox.Show(exception.ToString());
                    }
                    finally {
                        //
                        // Close stuff if needed.
                        //
                        
                        if (_streamReader != null) {
                            try {
                                _streamReader.Close();
                                _streamReader.Dispose();
                            }
                            finally {
                                _streamReader = null;
                            }
                        }
                    }
                }
                catch {
                    //
                    // Always throw the exception, if any, if 'stuff' cannot be closed.
                    // vApus will handle it as a connection problem.
                    //
                    
                    throw;
                }
                finally {
                    _stopwatch.Stop();
                    timeToLastByte = _stopwatch.Elapsed;
                    _stopwatch.Reset();
                }
            }
            
            public void Dispose() {
                if (!_isDisposed) {
                    _isDisposed = true;
                    _httpWebRequest = null;
                    _httpWebResponse = null;
                    _cookieCollection= null;
                    _cookieDecoder = null;
                    if (_streamReader != null) {
                        try {
                            _streamReader.Close();
                            _streamReader.Dispose();
                            _streamReader = null;
                        }
                        catch {
                        }
                    }
                }
            }
        #endregion // Functions
        
        #region Free Coding
            private void InitHttpWebRequest() {
                #if USEMULTICONNECTION
                if (_parameterizedLogEntry[_getData].Count != 0) {
                    string getData = _parameterizedLogEntry[_getData].CombineValues();
                    //if(_sid != string.Empty) {
                        //    getData = getData.Replace("@replaceSID", _sid);
                    //}
                    
                    _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("http://{0}{1}?{2}",
                    _parameterizedLogEntry[_destinationHost].Value, _parameterizedLogEntry[_relativeUrl].Value,
                    getData)));
                }
                else {
                    _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("http://{0}{1}",
                    _parameterizedLogEntry[_destinationHost].Value, _parameterizedLogEntry[_relativeUrl].Value)));
                }
                #else
                if (_parameterizedLogEntry[_getData].Count != 0) {
                    string getData = _parameterizedLogEntry[_getData].CombineValues();
                    //if(_sid != string.Empty) {
                        //getData = getData.Replace("@replaceSID", _sid);
                    //}
                    
                    _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("{0}{1}?{2}",
                    _connectionProxySyntaxItem0, _parameterizedLogEntry[_relativeUrl].Value,
                    getData)));
                }
                else {
                    _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("{0}{1}",
                    _connectionProxySyntaxItem0, _parameterizedLogEntry[_relativeUrl].Value)));
                }
                #endif
                
                _httpWebRequest.UserAgent = _parameterizedLogEntry[_userAgent].Value;
                // 60 seconds seems reasonable.
                _httpWebRequest.Timeout= 60000;
                _httpWebRequest.ReadWriteTimeout = _httpWebRequest.Timeout;
                _httpWebRequest.AllowAutoRedirect = false;
                _httpWebRequest.ServicePoint.Expect100Continue = false;
                
                _httpWebRequest.ServicePoint.ConnectionLimit = (this.GetParent() as ConnectionProxyPool).PoolSize;
                
                _httpWebRequest.Method = _parameterizedLogEntry[_requestMethod].Value;
                _httpWebRequest.ContentLength = 0;
                
                _httpWebRequest.ContentType = String.IsNullOrEmpty(_parameterizedLogEntry[_contentType].Value) ? "application/x-www-form-urlencoded" : _parameterizedLogEntry[_contentType].Value;
                
                #if USECUSTOMHEADERS
                foreach (string header in _custom_headers) {
                    _httpWebRequest.Headers.Add(header);
                }
                #endif
            }
            
            private void InitCookies() {
                if (_cookieCollection == null) {
                    _httpWebRequest.CookieContainer = new CookieContainer();
                    _cookieCollection = new CookieCollection();
                    _cookieDecoder = new CookieDecoder();
                }
                
                #if USELOGGEDCOOKIES
                foreach (var kvp in _parameterizedLogEntry[_cookies]) {
                    string key = kvp[0].Value.TrimStart();
                    string value = ((kvp.Count == 1) ? string.Empty : kvp[1].Value);
                    
                    int cookieIndex = GetCookieIndex(key);
                    if (cookieIndex == -1) {
                        Cookie cookie = new Cookie(key, value);
                        
                        // Trim http://
                        cookie.Domain = _connectionProxySyntaxItem0.Substring(7);
                        _cookieCollection.Add(cookie);
                    }
                }
                #endif
            }
            
            private void ApplyPostData() {
                if (_parameterizedLogEntry[_postData].Value.Length != 0) {
                    string postData = _parameterizedLogEntry[_postData].Value;
                    
                    #if USEVIEWSTATE
                    bool match = false;
                    foreach (string url in _viewstate_urls) {
                        if (_parameterizedLogEntry[_relativeUrl].Value == url) {
                            match = true;
                            break;
                        }
                    }
                    
                    if (match &amp;&amp; _viewstate != string.Empty) {
                        postData = postData.Replace("@replaceViewstate", _viewstate).Replace("@replaceEventvalidation", _eventvalidation);
                    }
                    #endif
                    
                    //if (_sid != string.Empty) {
                        //postData = postData.Replace("@replaceSID", _sid);
                    //}
                    
                    _httpWebRequest.ContentLength = postData.Length;
                    Stream postStream = _httpWebRequest.GetRequestStream();
                    StreamWriter postStreamWriter = new StreamWriter(postStream);
                    postStreamWriter.Write(postData);
                    postStreamWriter.Flush();
                    
                    postStreamWriter.Close();
                    postStreamWriter.Dispose();
                    postStreamWriter = null;
                    
                    postStream.Close();
                }
            }
            
            private void HandleCookiesBeforeRequest() {
                #if USECUSTOMCOOKIEPARSER
                //Domain for the cookies should be determined here.
                string authority = _httpWebRequest.RequestUri.GetLeftPart(UriPartial.Authority);
                string scheme = _httpWebRequest.RequestUri.GetLeftPart(UriPartial.Scheme); //http:// https://
                authority = authority.Substring(scheme.Length);
                string domain = authority;
                
                // Support for top level domains; we probably don't need this.
                // TODO: Should be tested with a URL (not IP) to verify this.
                /*
                    IPAddress ipAddress;
                    if(!IPAddress.TryParse(authority, out ipAddress)) {
                        int dotIndex = authority.IndexOf('.');
                        if (dotIndex != -1 &amp;&amp; dotIndex != authority.Length - 1) {
                            domain = authority.Substring(dotIndex + 1);
                        }
                    }
                */
                
                foreach (Cookie cookie in _cookieCollection) {
                    cookie.Domain = domain;
                }
                #endif
                
                _httpWebRequest.CookieContainer = new CookieContainer();
                _httpWebRequest.CookieContainer.Add(_cookieCollection);
            }
            
            private void HandleCookiesAfterRequest() {
                #if USECUSTOMCOOKIEPARSER
                var newCookieCollection = GetCookies(_httpWebResponse.Headers);
                var requestCookieCollection = GetCookies(_httpWebRequest.Headers);
                #else
                var newCookieCollection = _httpWebResponse.Cookies;
                var requestCookieCollection = _httpWebRequest.CookieContainer.GetCookies(_httpWebRequest.RequestUri);
                #endif
                
                // Add ASP authentication cookies and old cookies that might be important (better sending too many cookies than too few).
                foreach (Cookie cookie in requestCookieCollection) {
                    if (GetCookieIndex(cookie, newCookieCollection) == -1) {
                        newCookieCollection.Add(cookie);
                    }
                }
                // Copy the cached cookies that are not yet in the collection, the check happens on the name of the cookie.
                foreach (Cookie cookie in _cookieCollection) {
                    if (GetCookieIndex(cookie, newCookieCollection) == -1) {
                        newCookieCollection.Add(cookie);
                    }
                }
                _cookieCollection = newCookieCollection;
            }
            
            private int GetCookieIndex(Cookie cookie, CookieCollection cookieCollection) {
                for (int i = 0; i &lt; cookieCollection.Count; i++) {
                    if (cookieCollection[i].Name == cookie.Name) {
                        return i;
                    }
                }
                return -1;
            }
            
            private CookieCollection GetCookies(WebHeaderCollection headers) {
                var cookieCollection = new CookieCollection();
                foreach (string headerName in headers.Keys) {
                    string lowerheaderName = headerName.ToLower();
                    if (lowerheaderName == "set-cookie" || lowerheaderName == "cookie") {
                        foreach (Cookie cookie in _cookieDecoder.Decode(headers[headerName])) {
                            int cookieIndex = GetCookieIndex(cookie, cookieCollection);
                            if (cookieIndex == -1) {
                                cookieCollection.Add(cookie);
                            }
                            else {
                                cookieCollection[cookieIndex].Value = cookie.Value;
                            }
                        }
                    }
                }
                return cookieCollection;
            }
        #endregion // Free Coding
    } // ConnectionProxy
} // vApus.Stresstest</Code>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyCode>
      </Items>
      <Label>HTTP @BRANCH@-@TM@</Label>
      <ShowInGui>True</ShowInGui>
      <IsDefaultItem>False</IsDefaultItem>
      <IsEmpty>False</IsEmpty>
    </ConnectionProxy>
  </Items>
</ConnectionProxies>