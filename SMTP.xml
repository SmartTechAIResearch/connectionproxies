<ConnectionProxies>
  <Items>
    <ConnectionProxy>
      <Items>
        <ConnectionProxyRuleSet>
          <Items>
            <ConnectionProxySyntaxItem>
              <Items />
              <Description>
              </Description>
              <Label>IP or Hostname</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
            <ConnectionProxySyntaxItem>
              <Items />
              <Description>The default port is 25, if this field is empty the default value is used.</Description>
              <Label>Port</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
          </Items>
          <Connected>False</Connected>
          <TracertField>1</TracertField>
          <ChildDelimiter>
          </ChildDelimiter>
          <Description>
          </Description>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyRuleSet>
        <ConnectionProxyCode>
          <Items />
          <Threads>1</Threads>
          <Code>//Connection Proxy Document
/*
    ConnectionProxy generated by vApus
    vApus is Copyrighted by Sizing Servers Lab
    University College of West-Flanders, Department GKG
	
	VERSION @BRANCH-@TM
*/

// dllreferences:System.dll;System.Data.dll;vApus.Util.dll;vApus.Stresstest.dll;System.Net.dll;

#region Preprocessors
    //
    // e.g. #define NOTMUCHUSEDFEATURE
    //
    // Further in code:
    // #if NOTMUCHUSEDFEATURE
    // do stuff...
    // #endif
#endregion //Preprocessors
#region Default Usings
    using System;
    using System.Data;
    using System.Diagnostics;
    // Contains the StringTree class.
    using vApus.Util;
#endregion //Default Usings
#region Custom Usings
    using System.Net.Mail;
    using System.IO;
    using System.Net.Mime;
#endregion //Custom Usings
namespace vApus.Stresstest {
    public class ConnectionProxy : IConnectionProxy {
        #region Default Fields
            Stopwatch _stopwatch = new Stopwatch();
            bool _isDisposed;
            // -- RuleSetFields --
            System.String _connectionProxySyntaxItem0 = string.Empty; // IP or Hostname
            System.String _connectionProxySyntaxItem1 = string.Empty; // Port
            // -- RuleSetFields --
            
        #endregion //Default Fields
        #region Custom Fields
            //
            // Here you can put labels, for instance, for the index values of the String Tree nodes (eg. int ip = 0).
            //
            
            SmtpClient _smtpClient;
            const int _from = 1, _to = 2, _subject = 3, _body = 4, _attachment = 5;
        #endregion //Custom Fields
        #region Properties
            public bool IsConnectionOpen { get {
                return  true;
            }} //IsConnectionOpen
            public bool IsDisposed { get {
                return _isDisposed;
            }} //IsDisposed
        #endregion //Properties
        public ConnectionProxy() {
            _smtpClient = (_connectionProxySyntaxItem1 == string.Empty) ?
            new SmtpClient(_connectionProxySyntaxItem0) :
            new SmtpClient(_connectionProxySyntaxItem0, int.Parse(_connectionProxySyntaxItem1));
        } //ConnectionProxy
        #region Functions
            public void TestConnection(out string error) {
                error = null;
            } //TestConnection
            public void OpenConnection() {
                if(!IsConnectionOpen)
                {
                    	//
                    	// ...
                    	//
                }
            } //OpenConnection
            public void CloseConnection() {
                if(IsConnectionOpen)
                {
                    	//
                    	// ...
                    	//
                }
            } //CloseConnection
            public void SendAndReceive(StringTree parameterizedLogEntry, out DateTime sentAt, out TimeSpan timeToLastByte, out Exception exception) {
                exception = null;
                
                //
                // parameterizedLogEntry is the log entry parsed to a String Tree using the Log Rule Set.
                // String Tree is a simple class: it can have either a value (string Value { get; }) or childs who are also String Trees (e.g. StringTree foo = parameterizedLogEntry[n] where n is an integer value).
                // You can get the combined value of the childs using the function CombineValues() (not shallow, returns a string), this uses the child delimiters in the rule set to glue these values together. 
                //
                
                //
                // Initiate other stuff here.
                // (eg. Fields or functions from the free coding section.)
                //
                
                if (_isDisposed)
                {
                    	sentAt = DateTime.Now;
                    	timeToLastByte = new TimeSpan();
                    	return;
                }
                try
                {
                    	sentAt = DateTime.Now;
                    	_stopwatch.Start();
                    	try
                    	{
                        		//
                        		// Send the request to the server here.
                        		//
                        		
                        		MailMessage message = new MailMessage(parameterizedLogEntry[_from].Value,
                        		parameterizedLogEntry[_to].CombineValues(),
                        		parameterizedLogEntry[_subject].CombineValues(),
                        		parameterizedLogEntry[_body].CombineValues());
                        		
                        		for(int i = _attachment; i &lt; parameterizedLogEntry.Count; i++)
                        		{
                            			message.Attachments.Add(GetAttachment(parameterizedLogEntry[i].CombineValues()));
                        		}
                        		
                        		_smtpClient.Send(message);
                    	}
                    	catch (Exception ex)
                    	{
                        		exception = ex;
                    	}
                    	finally
                    	{
                        		//
                        		// Close stuff if needed.
                        		//
                    	}
                }
                catch
                {
                    	//
                    	// Always throw the exception, if any, if 'stuff' cannot be closed.
                    	// vApus will handle it as a connection problem.
                    	//
                    
                    	throw;
                }
                finally
                {
                    	_stopwatch.Stop();
                    	timeToLastByte = _stopwatch.Elapsed;
                    	_stopwatch.Reset();
                    	
                }
            } //SendAndReceive
            public void TestSendAndReceive(StringTree parameterizedLogEntry, out DateTime sentAt, out TimeSpan timeToLastByte, out Exception exception) {
                SendAndReceive(parameterizedLogEntry, out sentAt, out timeToLastByte, out exception);
            } //TestSendAndReceive
            public void Dispose() {
                if(!_isDisposed)
                {
                    	_isDisposed = true;
                    	_smtpClient = null;
                }
            } //Dispose
        #endregion //Functions
        #region Free Coding
            public Attachment GetAttachment (string gibberish)
            {
                	MemoryStream memStream = new MemoryStream();
                	byte[] buffer = (new System.Text.UTF8Encoding()).GetBytes(gibberish);
                	memStream.Write(buffer, 0, buffer.Length);
                	
                	//Octet = not interpreted
                	return new Attachment(memStream, MediaTypeNames.Application.Octet);
            }
        #endregion //Free Coding
    } //ConnectionProxy
} //vApus.Stresstest</Code>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyCode>
      </Items>
      <Label>SMTP</Label>
      <ShowInGui>True</ShowInGui>
      <IsDefaultItem>False</IsDefaultItem>
      <IsEmpty>False</IsEmpty>
    </ConnectionProxy>
  </Items>
</ConnectionProxies>
