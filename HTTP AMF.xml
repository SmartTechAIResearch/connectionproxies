<ConnectionProxies>
  <Items>
    <ConnectionProxy>
      <Items>
        <ConnectionProxyRuleSet>
          <Items>
            <ConnectionProxySyntaxItem>
              <Items>
                <Rule>
                  <Items />
                  <RegExp>
                  </RegExp>
                  <IgnoreCase>False</IgnoreCase>
                  <ValueType>stringType</ValueType>
                  <UsePasswordChar>False</UsePasswordChar>
                  <Description>
                  </Description>
                  <Label>
                  </Label>
                  <ShowInGui>True</ShowInGui>
                  <IsDefaultItem>False</IsDefaultItem>
                  <IsEmpty>False</IsEmpty>
                </Rule>
              </Items>
              <Description>Must start with 'http://' and may not end with /.</Description>
              <Label>URL</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
          </Items>
          <Connected>False</Connected>
          <TracertField>1</TracertField>
          <ChildDelimiter>
          </ChildDelimiter>
          <Description>
          </Description>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyRuleSet>
        <ConnectionProxyCode>
          <Items />
          <Threads>1</Threads>
          <Code>//Connection Proxy Document
/*
    ConnectionProxy generated by vApus
    vApus is Copyrighted by Sizing Servers Lab
    University College of West-Flanders, Department GKG
	
	VERSION STABLE-@TM
*/

// The following line is used to add references when compiling, you can edit this here or in the references tab page. Please use the 'Browse...' button for dlls that are not in the GAC.
// dllreferences:System.dll;System.Data.dll;vApus.Util.dll;vApus.Stresstest.dll;AMF2_fat.dll;ICSharpCode.SharpZipLib.dll;IKVM.AWT.WinForms.dll;IKVM.OpenJDK.Beans.dll;IKVM.OpenJDK.Charsets.dll;IKVM.OpenJDK.Corba.dll;IKVM.OpenJDK.Core.dll;IKVM.OpenJDK.Jdbc.dll;IKVM.OpenJDK.Management.dll;IKVM.OpenJDK.Media.dll;IKVM.OpenJDK.Misc.dll;IKVM.OpenJDK.Naming.dll;IKVM.OpenJDK.Remoting.dll;IKVM.OpenJDK.Security.dll;IKVM.OpenJDK.Text.dll;IKVM.OpenJDK.Tools.dll;IKVM.OpenJDK.Util.dll;IKVM.OpenJDK.XML.API.dll;IKVM.OpenJDK.XML.Bind.dll;IKVM.OpenJDK.XML.Crypto.dll;IKVM.OpenJDK.XML.Parse.dll;IKVM.OpenJDK.XML.Transform.dll;IKVM.OpenJDK.XML.WebServices.dll;IKVM.OpenJDK.XML.XPath.dll;IKVM.Reflection.dll;IKVM.Runtime.dll;IKVM.Runtime.JNI.dll;System.Web.dll;System.Windows.Forms.dll;vApus.SolutionTree.dll;

#region Preprocessors
    //
    // e.g. #define NOTMUCHUSEDFEATURE
    //
    // Further in code:
    // #if NOTMUCHUSEDFEATURE
    // do stuff...
    // #endif
#endregion //Preprocessors

#region Usings
    using System;
    using System.Data;
    using System.Diagnostics;
    // Contains the StringTree class.
    using vApus.Util;
    
    //
    // Here you can put your own usings under the default ones.
    //
    using System.IO;
    using System.Net;
    using System.Windows.Forms;
    using System.IO.Compression;
    using be.sizingservers.amf;
#endregion //Usings

namespace vApus.Stresstest {
    public class ConnectionProxy : IConnectionProxy {
        #region Default Fields
            Stopwatch _stopwatch = new Stopwatch();
            bool _isDisposed;
            // -- RuleSetFields --
            System.String _connectionProxySyntaxItem0 = string.Empty; // URL
            // -- RuleSetFields --
            
        #endregion //Default Fields
        #region Custom Fields
            StringTree _parameterizedLogEntry;
            HttpWebRequest _httpWebRequest;
            HttpWebResponse _httpWebResponse;
            CookieCollection _cookieCollection;
            StreamReader _streamReader;
            const int _relativeUrl = 0, _requestMethod = 1, _getData = 2, _postData = 3, _cookies = 4, _userAgent = 5, _contentType = 6, _sourceIP = 7, _destinationIP = 8, _destinationHost = 9, _beginTimestamp = 10, _endTimestamp = 11;
            
            // If TRUE, the Connection set in vApus will be ignored for the stresstest. The logged Destination Host is used instead.
            // This is sometimes necessary if for example authentication is redirected to a secondary server or if cookie-free
            // (sub)domains are used to serve static content.
            // This setting is not used while testing the Connection, so be sure to always setup a valid Connection in vApus.
            bool _multiConnections = false;
        #endregion //Custom Fields
        #region Properties
            public bool IsConnectionOpen { get {
                return true;
            }} //IsConnectionOpen
            public bool IsDisposed { get {
                return _isDisposed;
            }} //IsDisposed
        #endregion //Properties
        public ConnectionProxy() {
            
        } //ConnectionProxy
        #region Functions
            public void TestConnection(out string error) {
                error = null;
                try
                {
                    _httpWebRequest= (HttpWebRequest)System.Net.WebRequest.Create(new Uri(_connectionProxySyntaxItem0));
                    _httpWebRequest.UserAgent = "vApus v2 - Test connection function";
                    _httpWebRequest.Timeout = 60000;
                    _httpWebRequest.AllowAutoRedirect = false;
                    _httpWebRequest.ServicePoint.Expect100Continue = false;
                    
                    _httpWebRequest.ServicePoint.ConnectionLimit = 1;
                    
                    _httpWebRequest.Method = "GET";
                    _httpWebRequest.ContentLength = 0;
                    _httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    
                    _cookieCollection= new CookieCollection();
                    
                    HandleCookiesBeforeRequest();
                    _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                    
                    
                    if (_httpWebResponse.StatusCode == HttpStatusCode.NotFound)
                    {
                        throw new Exception("Page not found!");
                    }
                    
                    if (_httpWebResponse.ContentEncoding.ToLower().Contains("gzip"))
                    {
                        _streamReader = new StreamReader(new GZipStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                    }
                    else
                    {
                        _streamReader = new StreamReader(_httpWebResponse.GetResponseStream(), (_httpWebResponse.ContentEncoding.Length &gt; 0) ?
                        System.Text.Encoding.GetEncoding(_httpWebResponse.ContentEncoding) : System.Text.Encoding.GetEncoding(1252));
                    }
                    
                    HandleCookiesAfterRequest();
                }
                catch (Exception ex)
                {
                    error = ex.ToString();
                }
                finally
                {
                    _cookieCollection= null;
                    if (_streamReader != null)
                    {
                        try
                        {
                            _streamReader.Close();
                            _streamReader.Dispose();
                            _streamReader = null;
                        }
                        catch
                        {
                        }
                    }
                }
            } //TestConnection
            public void OpenConnection() {
                if(!IsConnectionOpen)
                {
                    //
                    // ...
                    //
                }
            } //OpenConnection
            public void CloseConnection() {
                if(IsConnectionOpen)
                {
                    //
                    // ...
                    //
                }
            } //CloseConnection
            public void SendAndReceive(StringTree parameterizedLogEntry, out DateTime sentAt, out TimeSpan timeToLastByte, out Exception exception) {
                _parameterizedLogEntry = parameterizedLogEntry;
                exception = null;
                if (_isDisposed)
                {
                    sentAt = DateTime.Now;
                    timeToLastByte = new TimeSpan();
                    return;
                }
                try
                {
                    sentAt = DateTime.Now;
                    _stopwatch.Start();
                    try
                    {
                        InitHttpWebRequest();
                        //InitCookies();
                        //HandleCookiesBeforeRequest();
                        ApplyPostData();
                        _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                        
                        if (_httpWebResponse.StatusCode == HttpStatusCode.NotFound)
                        {
                            throw new Exception("Page not found!");
                        }
                        
                        if (_httpWebResponse.ContentEncoding.ToLower().Contains("gzip"))
                        {
                            _streamReader = new StreamReader(new GZipStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                        }
                        else
                        {
                            _streamReader = new StreamReader(_httpWebResponse.GetResponseStream(), (_httpWebResponse.ContentEncoding.Length &gt; 0) ?
                            System.Text.Encoding.GetEncoding(_httpWebResponse.ContentEncoding) : System.Text.Encoding.GetEncoding(1252));
                        }
                        
                        //HandleCookiesAfterRequest();
                        
                        //WritePage(_streamReader.ReadToEnd(), string.Concat_parameterizedLogEntry[_relativeUrl].Value.Replace("/", "_"), ".htm"));
                    }
                    catch (Exception ex)
                    {
                        exception = ex;
                    }
                    finally
                    {
                        if (_streamReader != null)
                        {
                            try
                            {
                                _streamReader.Close();
                                _streamReader.Dispose();
                            }
                            finally
                            {
                                _streamReader = null;
                            }
                        }
                    }
                }
                catch
                {
                    throw;
                }
                finally
                {
                    _stopwatch.Stop();
                    timeToLastByte = _stopwatch.Elapsed;
                    _stopwatch.Reset();
                }
            } //SendAndReceive
            public void TestSendAndReceive(StringTree parameterizedLogEntry, out DateTime sentAt, out TimeSpan timeToLastByte, out Exception exception) {
                SendAndReceive(parameterizedLogEntry, out sentAt, out timeToLastByte, out exception);
            } //TestSendAndReceive
            public void Dispose() {
                if(!_isDisposed)
                {
                    _isDisposed = true;
                    _httpWebRequest = null;
                    _httpWebResponse = null;
                    _cookieCollection= null;
                    if (_streamReader != null)
                    {
                        try
                        {
                            _streamReader.Close();
                            _streamReader.Dispose();
                            _streamReader = null;
                        }
                        catch
                        {
                        }
                    }
                }
            } //Dispose
        #endregion //Functions
        #region Free Coding
            private void InitHttpWebRequest()
            {
                if( _multiConnections &amp;&amp; ! String.IsNullOrEmpty(_parameterizedLogEntry[_destinationHost].Value) ) {
                    if(_parameterizedLogEntry[_getData].Count != 0) {
                        _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("http://{0}{1}?{2}",
                        _parameterizedLogEntry[_destinationHost].Value, _parameterizedLogEntry[_relativeUrl].Value,
                        _parameterizedLogEntry[_getData].CombineValues())));
                    }
                    else {
                        _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("http://{0}{1}",
                        _parameterizedLogEntry[_destinationHost].Value, _parameterizedLogEntry[_relativeUrl].Value)));
                    }
                }
                else {
                    if(_parameterizedLogEntry[_getData].Count != 0) {
                        _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("{0}{1}?{2}",
                        _connectionProxySyntaxItem0, _parameterizedLogEntry[_relativeUrl].Value,
                        _parameterizedLogEntry[_getData].CombineValues())));
                    }
                    else {
                        _httpWebRequest = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("{0}{1}",
                        _connectionProxySyntaxItem0, _parameterizedLogEntry[_relativeUrl].Value)));
                    }
                }
                
                _httpWebRequest.UserAgent = _parameterizedLogEntry[_userAgent].Value;
                _httpWebRequest.Timeout = 60000;
                _httpWebRequest.AllowAutoRedirect = false;
                _httpWebRequest.ServicePoint.Expect100Continue = false;
                
                _httpWebRequest.ServicePoint.ConnectionLimit = (this.GetParent() as ConnectionProxyPool).PoolSize;
                
                _httpWebRequest.Method = _parameterizedLogEntry[_requestMethod].Value;
                _httpWebRequest.ContentLength = 0;
                
                _httpWebRequest.ContentType = String.IsNullOrEmpty(_parameterizedLogEntry[_contentType].Value) ? "application/x-www-form-urlencoded" : _parameterizedLogEntry[_contentType].Value;
            }
            
            
            
            private void InitCookies()
            {
                if (_cookieCollection== null)
                {
                    _cookieCollection= new CookieCollection();
                }
                foreach (var kvp in _parameterizedLogEntry[_cookies])
                {
                    string key = kvp[0].Value.TrimStart();
                    string value = ((kvp.Count == 1) ? string.Empty : kvp[1].Value);
                    
                    int cookieIndex = GetCookieIndex(key);
                    if (cookieIndex == -1)
                    {
                        Cookie cookie = new Cookie(key, value);
                        
                        // Trim http://
                        cookie.Domain = _connectionProxySyntaxItem0.Substring(7);
                        _cookieCollection.Add(cookie);
                    }
                }
            }
            
            private void ApplyPostData()
            {
                if (_parameterizedLogEntry[_postData].Value.Length != 0)
                {
                    string postData = _parameterizedLogEntry[_postData].Value;
                    
                    byte[] bytes = AMFUtil.serializeAMFfromXML(postData);
                    
                    _httpWebRequest.ContentLength = bytes.Length;
                    Stream postStream = _httpWebRequest.GetRequestStream();
                    postStream.Write(bytes, 0, bytes.Length);
                    
                    postStream.Flush();
                    postStream.Close();
                    postStream.Dispose();
                    postStream = null;
                }
            }
            
            private void HandleCookiesBeforeRequest()
            {
                _httpWebRequest.CookieContainer = new CookieContainer();
                _httpWebRequest.CookieContainer.Add(_cookieCollection);
            }
            
            private void HandleCookiesAfterRequest()
            {
                if (_httpWebRequest.CookieContainer.Count &gt; 0)
                {
                    foreach (Cookie cookie in _httpWebRequest.CookieContainer.GetCookies(_httpWebRequest.RequestUri))
                    {
                        int cookieIndex = GetCookieIndex(cookie.Name);
                        if (cookieIndex == -1)
                        {
                            _cookieCollection.Add(cookie);
                        }
                        else
                        {
                            _cookieCollection[cookieIndex].Value = cookie.Value;
                        }
                    }
                }
                if (_httpWebResponse.Cookies.Count &gt; 0)
                {
                    foreach (Cookie cookie in _httpWebResponse.Cookies)
                    {
                        
                        int cookieIndex = GetCookieIndex(cookie.Name);
                        if (cookieIndex == -1)
                        {
                            _cookieCollection.Add(cookie);
                        }
                        else
                        {
                            _cookieCollection[cookieIndex].Value = cookie.Value;
                        }
                    }
                }
            }
            
            private int GetCookieIndex(string cookieName)
            {
                for (int i = 0; i &lt; _cookieCollection.Count; i++)
                {
                    if (_cookieCollection[i].Name == cookieName)
                    {
                        return i;
                    }
                }
                return -1;
            }
            
            // For testing purposes only.
            private void WritePage(string source, string pageName)
            {
                string testedUrlsPath = Path.Combine(Application.StartupPath, "testedUrls");
                if (!Directory.Exists(testedUrlsPath))
                {
                    Directory.CreateDirectory(testedUrlsPath);
                }
                string path = Path.Combine(testedUrlsPath, pageName);
                StreamWriter sw = new StreamWriter(path);
                sw.Write(source);
                sw.Flush();
                sw.Close();
                sw.Dispose();
                sw = null;
                Process.Start(path);
            }
        #endregion //Free Coding
    } //ConnectionProxy
} //vApus.Stresstest</Code>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyCode>
      </Items>
      <Label>HTTP AMF</Label>
      <ShowInGui>True</ShowInGui>
      <IsDefaultItem>False</IsDefaultItem>
      <IsEmpty>False</IsEmpty>
    </ConnectionProxy>
  </Items>
</ConnectionProxies>